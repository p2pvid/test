// package: ffs.rpc
// file: ffs/rpc/rpc.proto

import * as jspb from "google-protobuf";

export class AddrInfo extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getAddr(): string;
  setAddr(value: string): void;

  getType(): string;
  setType(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddrInfo.AsObject;
  static toObject(includeInstance: boolean, msg: AddrInfo): AddrInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddrInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddrInfo;
  static deserializeBinaryFromReader(message: AddrInfo, reader: jspb.BinaryReader): AddrInfo;
}

export namespace AddrInfo {
  export type AsObject = {
    name: string,
    addr: string,
    type: string,
  }
}

export class IpfsConfig extends jspb.Message {
  getAddTimeout(): number;
  setAddTimeout(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IpfsConfig.AsObject;
  static toObject(includeInstance: boolean, msg: IpfsConfig): IpfsConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: IpfsConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IpfsConfig;
  static deserializeBinaryFromReader(message: IpfsConfig, reader: jspb.BinaryReader): IpfsConfig;
}

export namespace IpfsConfig {
  export type AsObject = {
    addTimeout: number,
  }
}

export class HotConfig extends jspb.Message {
  getEnabled(): boolean;
  setEnabled(value: boolean): void;

  getAllowUnfreeze(): boolean;
  setAllowUnfreeze(value: boolean): void;

  getUnfreezeMaxPrice(): number;
  setUnfreezeMaxPrice(value: number): void;

  hasIpfs(): boolean;
  clearIpfs(): void;
  getIpfs(): IpfsConfig | undefined;
  setIpfs(value?: IpfsConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HotConfig.AsObject;
  static toObject(includeInstance: boolean, msg: HotConfig): HotConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HotConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HotConfig;
  static deserializeBinaryFromReader(message: HotConfig, reader: jspb.BinaryReader): HotConfig;
}

export namespace HotConfig {
  export type AsObject = {
    enabled: boolean,
    allowUnfreeze: boolean,
    unfreezeMaxPrice: number,
    ipfs?: IpfsConfig.AsObject,
  }
}

export class FilRenew extends jspb.Message {
  getEnabled(): boolean;
  setEnabled(value: boolean): void;

  getThreshold(): number;
  setThreshold(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FilRenew.AsObject;
  static toObject(includeInstance: boolean, msg: FilRenew): FilRenew.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FilRenew, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FilRenew;
  static deserializeBinaryFromReader(message: FilRenew, reader: jspb.BinaryReader): FilRenew;
}

export namespace FilRenew {
  export type AsObject = {
    enabled: boolean,
    threshold: number,
  }
}

export class FilConfig extends jspb.Message {
  getRepFactor(): number;
  setRepFactor(value: number): void;

  getDealMinDuration(): number;
  setDealMinDuration(value: number): void;

  clearExcludedMinersList(): void;
  getExcludedMinersList(): Array<string>;
  setExcludedMinersList(value: Array<string>): void;
  addExcludedMiners(value: string, index?: number): string;

  clearTrustedMinersList(): void;
  getTrustedMinersList(): Array<string>;
  setTrustedMinersList(value: Array<string>): void;
  addTrustedMiners(value: string, index?: number): string;

  clearCountryCodesList(): void;
  getCountryCodesList(): Array<string>;
  setCountryCodesList(value: Array<string>): void;
  addCountryCodes(value: string, index?: number): string;

  hasRenew(): boolean;
  clearRenew(): void;
  getRenew(): FilRenew | undefined;
  setRenew(value?: FilRenew): void;

  getAddr(): string;
  setAddr(value: string): void;

  getMaxPrice(): number;
  setMaxPrice(value: number): void;

  getFastRetrieval(): boolean;
  setFastRetrieval(value: boolean): void;

  getDealStartOffset(): number;
  setDealStartOffset(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FilConfig.AsObject;
  static toObject(includeInstance: boolean, msg: FilConfig): FilConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FilConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FilConfig;
  static deserializeBinaryFromReader(message: FilConfig, reader: jspb.BinaryReader): FilConfig;
}

export namespace FilConfig {
  export type AsObject = {
    repFactor: number,
    dealMinDuration: number,
    excludedMinersList: Array<string>,
    trustedMinersList: Array<string>,
    countryCodesList: Array<string>,
    renew?: FilRenew.AsObject,
    addr: string,
    maxPrice: number,
    fastRetrieval: boolean,
    dealStartOffset: number,
  }
}

export class ColdConfig extends jspb.Message {
  getEnabled(): boolean;
  setEnabled(value: boolean): void;

  hasFilecoin(): boolean;
  clearFilecoin(): void;
  getFilecoin(): FilConfig | undefined;
  setFilecoin(value?: FilConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ColdConfig.AsObject;
  static toObject(includeInstance: boolean, msg: ColdConfig): ColdConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ColdConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ColdConfig;
  static deserializeBinaryFromReader(message: ColdConfig, reader: jspb.BinaryReader): ColdConfig;
}

export namespace ColdConfig {
  export type AsObject = {
    enabled: boolean,
    filecoin?: FilConfig.AsObject,
  }
}

export class StorageConfig extends jspb.Message {
  hasHot(): boolean;
  clearHot(): void;
  getHot(): HotConfig | undefined;
  setHot(value?: HotConfig): void;

  hasCold(): boolean;
  clearCold(): void;
  getCold(): ColdConfig | undefined;
  setCold(value?: ColdConfig): void;

  getRepairable(): boolean;
  setRepairable(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StorageConfig.AsObject;
  static toObject(includeInstance: boolean, msg: StorageConfig): StorageConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StorageConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StorageConfig;
  static deserializeBinaryFromReader(message: StorageConfig, reader: jspb.BinaryReader): StorageConfig;
}

export namespace StorageConfig {
  export type AsObject = {
    hot?: HotConfig.AsObject,
    cold?: ColdConfig.AsObject,
    repairable: boolean,
  }
}

export class IpfsHotInfo extends jspb.Message {
  getCreated(): number;
  setCreated(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IpfsHotInfo.AsObject;
  static toObject(includeInstance: boolean, msg: IpfsHotInfo): IpfsHotInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: IpfsHotInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IpfsHotInfo;
  static deserializeBinaryFromReader(message: IpfsHotInfo, reader: jspb.BinaryReader): IpfsHotInfo;
}

export namespace IpfsHotInfo {
  export type AsObject = {
    created: number,
  }
}

export class HotInfo extends jspb.Message {
  getEnabled(): boolean;
  setEnabled(value: boolean): void;

  getSize(): number;
  setSize(value: number): void;

  hasIpfs(): boolean;
  clearIpfs(): void;
  getIpfs(): IpfsHotInfo | undefined;
  setIpfs(value?: IpfsHotInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HotInfo.AsObject;
  static toObject(includeInstance: boolean, msg: HotInfo): HotInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HotInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HotInfo;
  static deserializeBinaryFromReader(message: HotInfo, reader: jspb.BinaryReader): HotInfo;
}

export namespace HotInfo {
  export type AsObject = {
    enabled: boolean,
    size: number,
    ipfs?: IpfsHotInfo.AsObject,
  }
}

export class FilStorage extends jspb.Message {
  getProposalCid(): string;
  setProposalCid(value: string): void;

  getRenewed(): boolean;
  setRenewed(value: boolean): void;

  getDuration(): number;
  setDuration(value: number): void;

  getActivationEpoch(): number;
  setActivationEpoch(value: number): void;

  getStartEpoch(): number;
  setStartEpoch(value: number): void;

  getMiner(): string;
  setMiner(value: string): void;

  getEpochPrice(): number;
  setEpochPrice(value: number): void;

  getPieceCid(): string;
  setPieceCid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FilStorage.AsObject;
  static toObject(includeInstance: boolean, msg: FilStorage): FilStorage.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FilStorage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FilStorage;
  static deserializeBinaryFromReader(message: FilStorage, reader: jspb.BinaryReader): FilStorage;
}

export namespace FilStorage {
  export type AsObject = {
    proposalCid: string,
    renewed: boolean,
    duration: number,
    activationEpoch: number,
    startEpoch: number,
    miner: string,
    epochPrice: number,
    pieceCid: string,
  }
}

export class FilInfo extends jspb.Message {
  getDataCid(): string;
  setDataCid(value: string): void;

  getSize(): number;
  setSize(value: number): void;

  clearProposalsList(): void;
  getProposalsList(): Array<FilStorage>;
  setProposalsList(value: Array<FilStorage>): void;
  addProposals(value?: FilStorage, index?: number): FilStorage;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FilInfo.AsObject;
  static toObject(includeInstance: boolean, msg: FilInfo): FilInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FilInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FilInfo;
  static deserializeBinaryFromReader(message: FilInfo, reader: jspb.BinaryReader): FilInfo;
}

export namespace FilInfo {
  export type AsObject = {
    dataCid: string,
    size: number,
    proposalsList: Array<FilStorage.AsObject>,
  }
}

export class ColdInfo extends jspb.Message {
  getEnabled(): boolean;
  setEnabled(value: boolean): void;

  hasFilecoin(): boolean;
  clearFilecoin(): void;
  getFilecoin(): FilInfo | undefined;
  setFilecoin(value?: FilInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ColdInfo.AsObject;
  static toObject(includeInstance: boolean, msg: ColdInfo): ColdInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ColdInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ColdInfo;
  static deserializeBinaryFromReader(message: ColdInfo, reader: jspb.BinaryReader): ColdInfo;
}

export namespace ColdInfo {
  export type AsObject = {
    enabled: boolean,
    filecoin?: FilInfo.AsObject,
  }
}

export class CidInfo extends jspb.Message {
  getJobId(): string;
  setJobId(value: string): void;

  getCid(): string;
  setCid(value: string): void;

  getCreated(): number;
  setCreated(value: number): void;

  hasHot(): boolean;
  clearHot(): void;
  getHot(): HotInfo | undefined;
  setHot(value?: HotInfo): void;

  hasCold(): boolean;
  clearCold(): void;
  getCold(): ColdInfo | undefined;
  setCold(value?: ColdInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CidInfo.AsObject;
  static toObject(includeInstance: boolean, msg: CidInfo): CidInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CidInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CidInfo;
  static deserializeBinaryFromReader(message: CidInfo, reader: jspb.BinaryReader): CidInfo;
}

export namespace CidInfo {
  export type AsObject = {
    jobId: string,
    cid: string,
    created: number,
    hot?: HotInfo.AsObject,
    cold?: ColdInfo.AsObject,
  }
}

export class BalanceInfo extends jspb.Message {
  hasAddr(): boolean;
  clearAddr(): void;
  getAddr(): AddrInfo | undefined;
  setAddr(value?: AddrInfo): void;

  getBalance(): number;
  setBalance(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BalanceInfo.AsObject;
  static toObject(includeInstance: boolean, msg: BalanceInfo): BalanceInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BalanceInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BalanceInfo;
  static deserializeBinaryFromReader(message: BalanceInfo, reader: jspb.BinaryReader): BalanceInfo;
}

export namespace BalanceInfo {
  export type AsObject = {
    addr?: AddrInfo.AsObject,
    balance: number,
  }
}

export class InstanceInfo extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  hasDefaultStorageConfig(): boolean;
  clearDefaultStorageConfig(): void;
  getDefaultStorageConfig(): StorageConfig | undefined;
  setDefaultStorageConfig(value?: StorageConfig): void;

  clearBalancesList(): void;
  getBalancesList(): Array<BalanceInfo>;
  setBalancesList(value: Array<BalanceInfo>): void;
  addBalances(value?: BalanceInfo, index?: number): BalanceInfo;

  clearPinsList(): void;
  getPinsList(): Array<string>;
  setPinsList(value: Array<string>): void;
  addPins(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InstanceInfo.AsObject;
  static toObject(includeInstance: boolean, msg: InstanceInfo): InstanceInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InstanceInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InstanceInfo;
  static deserializeBinaryFromReader(message: InstanceInfo, reader: jspb.BinaryReader): InstanceInfo;
}

export namespace InstanceInfo {
  export type AsObject = {
    id: string,
    defaultStorageConfig?: StorageConfig.AsObject,
    balancesList: Array<BalanceInfo.AsObject>,
    pinsList: Array<string>,
  }
}

export class Job extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getApiId(): string;
  setApiId(value: string): void;

  getCid(): string;
  setCid(value: string): void;

  getStatus(): JobStatusMap[keyof JobStatusMap];
  setStatus(value: JobStatusMap[keyof JobStatusMap]): void;

  getErrCause(): string;
  setErrCause(value: string): void;

  clearDealErrorsList(): void;
  getDealErrorsList(): Array<DealError>;
  setDealErrorsList(value: Array<DealError>): void;
  addDealErrors(value?: DealError, index?: number): DealError;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Job.AsObject;
  static toObject(includeInstance: boolean, msg: Job): Job.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Job, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Job;
  static deserializeBinaryFromReader(message: Job, reader: jspb.BinaryReader): Job;
}

export namespace Job {
  export type AsObject = {
    id: string,
    apiId: string,
    cid: string,
    status: JobStatusMap[keyof JobStatusMap],
    errCause: string,
    dealErrorsList: Array<DealError.AsObject>,
  }
}

export class DealError extends jspb.Message {
  getProposalCid(): string;
  setProposalCid(value: string): void;

  getMiner(): string;
  setMiner(value: string): void;

  getMessage(): string;
  setMessage(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DealError.AsObject;
  static toObject(includeInstance: boolean, msg: DealError): DealError.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DealError, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DealError;
  static deserializeBinaryFromReader(message: DealError, reader: jspb.BinaryReader): DealError;
}

export namespace DealError {
  export type AsObject = {
    proposalCid: string,
    miner: string,
    message: string,
  }
}

export class LogEntry extends jspb.Message {
  getCid(): string;
  setCid(value: string): void;

  getJid(): string;
  setJid(value: string): void;

  getTime(): number;
  setTime(value: number): void;

  getMsg(): string;
  setMsg(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LogEntry.AsObject;
  static toObject(includeInstance: boolean, msg: LogEntry): LogEntry.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LogEntry, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LogEntry;
  static deserializeBinaryFromReader(message: LogEntry, reader: jspb.BinaryReader): LogEntry;
}

export namespace LogEntry {
  export type AsObject = {
    cid: string,
    jid: string,
    time: number,
    msg: string,
  }
}

export class PaychInfo extends jspb.Message {
  getCtlAddr(): string;
  setCtlAddr(value: string): void;

  getAddr(): string;
  setAddr(value: string): void;

  getDirection(): DirectionMap[keyof DirectionMap];
  setDirection(value: DirectionMap[keyof DirectionMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PaychInfo.AsObject;
  static toObject(includeInstance: boolean, msg: PaychInfo): PaychInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PaychInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PaychInfo;
  static deserializeBinaryFromReader(message: PaychInfo, reader: jspb.BinaryReader): PaychInfo;
}

export namespace PaychInfo {
  export type AsObject = {
    ctlAddr: string,
    addr: string,
    direction: DirectionMap[keyof DirectionMap],
  }
}

export class ListDealRecordsConfig extends jspb.Message {
  clearFromAddrsList(): void;
  getFromAddrsList(): Array<string>;
  setFromAddrsList(value: Array<string>): void;
  addFromAddrs(value: string, index?: number): string;

  clearDataCidsList(): void;
  getDataCidsList(): Array<string>;
  setDataCidsList(value: Array<string>): void;
  addDataCids(value: string, index?: number): string;

  getIncludePending(): boolean;
  setIncludePending(value: boolean): void;

  getIncludeFinal(): boolean;
  setIncludeFinal(value: boolean): void;

  getAscending(): boolean;
  setAscending(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListDealRecordsConfig.AsObject;
  static toObject(includeInstance: boolean, msg: ListDealRecordsConfig): ListDealRecordsConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListDealRecordsConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListDealRecordsConfig;
  static deserializeBinaryFromReader(message: ListDealRecordsConfig, reader: jspb.BinaryReader): ListDealRecordsConfig;
}

export namespace ListDealRecordsConfig {
  export type AsObject = {
    fromAddrsList: Array<string>,
    dataCidsList: Array<string>,
    includePending: boolean,
    includeFinal: boolean,
    ascending: boolean,
  }
}

export class StorageDealInfo extends jspb.Message {
  getProposalCid(): string;
  setProposalCid(value: string): void;

  getStateId(): number;
  setStateId(value: number): void;

  getStateName(): string;
  setStateName(value: string): void;

  getMiner(): string;
  setMiner(value: string): void;

  getPieceCid(): string;
  setPieceCid(value: string): void;

  getSize(): number;
  setSize(value: number): void;

  getPricePerEpoch(): number;
  setPricePerEpoch(value: number): void;

  getStartEpoch(): number;
  setStartEpoch(value: number): void;

  getDuration(): number;
  setDuration(value: number): void;

  getDealId(): number;
  setDealId(value: number): void;

  getActivationEpoch(): number;
  setActivationEpoch(value: number): void;

  getMsg(): string;
  setMsg(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StorageDealInfo.AsObject;
  static toObject(includeInstance: boolean, msg: StorageDealInfo): StorageDealInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StorageDealInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StorageDealInfo;
  static deserializeBinaryFromReader(message: StorageDealInfo, reader: jspb.BinaryReader): StorageDealInfo;
}

export namespace StorageDealInfo {
  export type AsObject = {
    proposalCid: string,
    stateId: number,
    stateName: string,
    miner: string,
    pieceCid: string,
    size: number,
    pricePerEpoch: number,
    startEpoch: number,
    duration: number,
    dealId: number,
    activationEpoch: number,
    msg: string,
  }
}

export class StorageDealRecord extends jspb.Message {
  getRootCid(): string;
  setRootCid(value: string): void;

  getAddr(): string;
  setAddr(value: string): void;

  getTime(): number;
  setTime(value: number): void;

  getPending(): boolean;
  setPending(value: boolean): void;

  hasDealInfo(): boolean;
  clearDealInfo(): void;
  getDealInfo(): StorageDealInfo | undefined;
  setDealInfo(value?: StorageDealInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StorageDealRecord.AsObject;
  static toObject(includeInstance: boolean, msg: StorageDealRecord): StorageDealRecord.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StorageDealRecord, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StorageDealRecord;
  static deserializeBinaryFromReader(message: StorageDealRecord, reader: jspb.BinaryReader): StorageDealRecord;
}

export namespace StorageDealRecord {
  export type AsObject = {
    rootCid: string,
    addr: string,
    time: number,
    pending: boolean,
    dealInfo?: StorageDealInfo.AsObject,
  }
}

export class RetrievalDealInfo extends jspb.Message {
  getRootCid(): string;
  setRootCid(value: string): void;

  getSize(): number;
  setSize(value: number): void;

  getMinPrice(): number;
  setMinPrice(value: number): void;

  getPaymentInterval(): number;
  setPaymentInterval(value: number): void;

  getPaymentIntervalIncrease(): number;
  setPaymentIntervalIncrease(value: number): void;

  getMiner(): string;
  setMiner(value: string): void;

  getMinerPeerId(): string;
  setMinerPeerId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RetrievalDealInfo.AsObject;
  static toObject(includeInstance: boolean, msg: RetrievalDealInfo): RetrievalDealInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RetrievalDealInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RetrievalDealInfo;
  static deserializeBinaryFromReader(message: RetrievalDealInfo, reader: jspb.BinaryReader): RetrievalDealInfo;
}

export namespace RetrievalDealInfo {
  export type AsObject = {
    rootCid: string,
    size: number,
    minPrice: number,
    paymentInterval: number,
    paymentIntervalIncrease: number,
    miner: string,
    minerPeerId: string,
  }
}

export class RetrievalDealRecord extends jspb.Message {
  getAddr(): string;
  setAddr(value: string): void;

  getTime(): number;
  setTime(value: number): void;

  hasDealInfo(): boolean;
  clearDealInfo(): void;
  getDealInfo(): RetrievalDealInfo | undefined;
  setDealInfo(value?: RetrievalDealInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RetrievalDealRecord.AsObject;
  static toObject(includeInstance: boolean, msg: RetrievalDealRecord): RetrievalDealRecord.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RetrievalDealRecord, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RetrievalDealRecord;
  static deserializeBinaryFromReader(message: RetrievalDealRecord, reader: jspb.BinaryReader): RetrievalDealRecord;
}

export namespace RetrievalDealRecord {
  export type AsObject = {
    addr: string,
    time: number,
    dealInfo?: RetrievalDealInfo.AsObject,
  }
}

export class CreateRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateRequest): CreateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateRequest;
  static deserializeBinaryFromReader(message: CreateRequest, reader: jspb.BinaryReader): CreateRequest;
}

export namespace CreateRequest {
  export type AsObject = {
  }
}

export class CreateResponse extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getToken(): string;
  setToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreateResponse): CreateResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateResponse;
  static deserializeBinaryFromReader(message: CreateResponse, reader: jspb.BinaryReader): CreateResponse;
}

export namespace CreateResponse {
  export type AsObject = {
    id: string,
    token: string,
  }
}

export class ListAPIRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListAPIRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListAPIRequest): ListAPIRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListAPIRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListAPIRequest;
  static deserializeBinaryFromReader(message: ListAPIRequest, reader: jspb.BinaryReader): ListAPIRequest;
}

export namespace ListAPIRequest {
  export type AsObject = {
  }
}

export class ListAPIResponse extends jspb.Message {
  clearInstancesList(): void;
  getInstancesList(): Array<string>;
  setInstancesList(value: Array<string>): void;
  addInstances(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListAPIResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListAPIResponse): ListAPIResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListAPIResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListAPIResponse;
  static deserializeBinaryFromReader(message: ListAPIResponse, reader: jspb.BinaryReader): ListAPIResponse;
}

export namespace ListAPIResponse {
  export type AsObject = {
    instancesList: Array<string>,
  }
}

export class IDRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IDRequest.AsObject;
  static toObject(includeInstance: boolean, msg: IDRequest): IDRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: IDRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IDRequest;
  static deserializeBinaryFromReader(message: IDRequest, reader: jspb.BinaryReader): IDRequest;
}

export namespace IDRequest {
  export type AsObject = {
  }
}

export class IDResponse extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): IDResponse.AsObject;
  static toObject(includeInstance: boolean, msg: IDResponse): IDResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: IDResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): IDResponse;
  static deserializeBinaryFromReader(message: IDResponse, reader: jspb.BinaryReader): IDResponse;
}

export namespace IDResponse {
  export type AsObject = {
    id: string,
  }
}

export class AddrsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddrsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AddrsRequest): AddrsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddrsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddrsRequest;
  static deserializeBinaryFromReader(message: AddrsRequest, reader: jspb.BinaryReader): AddrsRequest;
}

export namespace AddrsRequest {
  export type AsObject = {
  }
}

export class AddrsResponse extends jspb.Message {
  clearAddrsList(): void;
  getAddrsList(): Array<AddrInfo>;
  setAddrsList(value: Array<AddrInfo>): void;
  addAddrs(value?: AddrInfo, index?: number): AddrInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddrsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AddrsResponse): AddrsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddrsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddrsResponse;
  static deserializeBinaryFromReader(message: AddrsResponse, reader: jspb.BinaryReader): AddrsResponse;
}

export namespace AddrsResponse {
  export type AsObject = {
    addrsList: Array<AddrInfo.AsObject>,
  }
}

export class DefaultStorageConfigRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DefaultStorageConfigRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DefaultStorageConfigRequest): DefaultStorageConfigRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DefaultStorageConfigRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DefaultStorageConfigRequest;
  static deserializeBinaryFromReader(message: DefaultStorageConfigRequest, reader: jspb.BinaryReader): DefaultStorageConfigRequest;
}

export namespace DefaultStorageConfigRequest {
  export type AsObject = {
  }
}

export class DefaultStorageConfigResponse extends jspb.Message {
  hasDefaultStorageConfig(): boolean;
  clearDefaultStorageConfig(): void;
  getDefaultStorageConfig(): StorageConfig | undefined;
  setDefaultStorageConfig(value?: StorageConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DefaultStorageConfigResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DefaultStorageConfigResponse): DefaultStorageConfigResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DefaultStorageConfigResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DefaultStorageConfigResponse;
  static deserializeBinaryFromReader(message: DefaultStorageConfigResponse, reader: jspb.BinaryReader): DefaultStorageConfigResponse;
}

export namespace DefaultStorageConfigResponse {
  export type AsObject = {
    defaultStorageConfig?: StorageConfig.AsObject,
  }
}

export class NewAddrRequest extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getAddressType(): string;
  setAddressType(value: string): void;

  getMakeDefault(): boolean;
  setMakeDefault(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NewAddrRequest.AsObject;
  static toObject(includeInstance: boolean, msg: NewAddrRequest): NewAddrRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NewAddrRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NewAddrRequest;
  static deserializeBinaryFromReader(message: NewAddrRequest, reader: jspb.BinaryReader): NewAddrRequest;
}

export namespace NewAddrRequest {
  export type AsObject = {
    name: string,
    addressType: string,
    makeDefault: boolean,
  }
}

export class NewAddrResponse extends jspb.Message {
  getAddr(): string;
  setAddr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NewAddrResponse.AsObject;
  static toObject(includeInstance: boolean, msg: NewAddrResponse): NewAddrResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NewAddrResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NewAddrResponse;
  static deserializeBinaryFromReader(message: NewAddrResponse, reader: jspb.BinaryReader): NewAddrResponse;
}

export namespace NewAddrResponse {
  export type AsObject = {
    addr: string,
  }
}

export class GetStorageConfigRequest extends jspb.Message {
  getCid(): string;
  setCid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetStorageConfigRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetStorageConfigRequest): GetStorageConfigRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetStorageConfigRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetStorageConfigRequest;
  static deserializeBinaryFromReader(message: GetStorageConfigRequest, reader: jspb.BinaryReader): GetStorageConfigRequest;
}

export namespace GetStorageConfigRequest {
  export type AsObject = {
    cid: string,
  }
}

export class GetStorageConfigResponse extends jspb.Message {
  hasConfig(): boolean;
  clearConfig(): void;
  getConfig(): StorageConfig | undefined;
  setConfig(value?: StorageConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetStorageConfigResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetStorageConfigResponse): GetStorageConfigResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetStorageConfigResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetStorageConfigResponse;
  static deserializeBinaryFromReader(message: GetStorageConfigResponse, reader: jspb.BinaryReader): GetStorageConfigResponse;
}

export namespace GetStorageConfigResponse {
  export type AsObject = {
    config?: StorageConfig.AsObject,
  }
}

export class SetDefaultStorageConfigRequest extends jspb.Message {
  hasConfig(): boolean;
  clearConfig(): void;
  getConfig(): StorageConfig | undefined;
  setConfig(value?: StorageConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetDefaultStorageConfigRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SetDefaultStorageConfigRequest): SetDefaultStorageConfigRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetDefaultStorageConfigRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetDefaultStorageConfigRequest;
  static deserializeBinaryFromReader(message: SetDefaultStorageConfigRequest, reader: jspb.BinaryReader): SetDefaultStorageConfigRequest;
}

export namespace SetDefaultStorageConfigRequest {
  export type AsObject = {
    config?: StorageConfig.AsObject,
  }
}

export class SetDefaultStorageConfigResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetDefaultStorageConfigResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SetDefaultStorageConfigResponse): SetDefaultStorageConfigResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetDefaultStorageConfigResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetDefaultStorageConfigResponse;
  static deserializeBinaryFromReader(message: SetDefaultStorageConfigResponse, reader: jspb.BinaryReader): SetDefaultStorageConfigResponse;
}

export namespace SetDefaultStorageConfigResponse {
  export type AsObject = {
  }
}

export class ShowRequest extends jspb.Message {
  getCid(): string;
  setCid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ShowRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ShowRequest): ShowRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ShowRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ShowRequest;
  static deserializeBinaryFromReader(message: ShowRequest, reader: jspb.BinaryReader): ShowRequest;
}

export namespace ShowRequest {
  export type AsObject = {
    cid: string,
  }
}

export class ShowResponse extends jspb.Message {
  hasCidInfo(): boolean;
  clearCidInfo(): void;
  getCidInfo(): CidInfo | undefined;
  setCidInfo(value?: CidInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ShowResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ShowResponse): ShowResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ShowResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ShowResponse;
  static deserializeBinaryFromReader(message: ShowResponse, reader: jspb.BinaryReader): ShowResponse;
}

export namespace ShowResponse {
  export type AsObject = {
    cidInfo?: CidInfo.AsObject,
  }
}

export class InfoRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InfoRequest.AsObject;
  static toObject(includeInstance: boolean, msg: InfoRequest): InfoRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InfoRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InfoRequest;
  static deserializeBinaryFromReader(message: InfoRequest, reader: jspb.BinaryReader): InfoRequest;
}

export namespace InfoRequest {
  export type AsObject = {
  }
}

export class InfoResponse extends jspb.Message {
  hasInfo(): boolean;
  clearInfo(): void;
  getInfo(): InstanceInfo | undefined;
  setInfo(value?: InstanceInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InfoResponse.AsObject;
  static toObject(includeInstance: boolean, msg: InfoResponse): InfoResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InfoResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InfoResponse;
  static deserializeBinaryFromReader(message: InfoResponse, reader: jspb.BinaryReader): InfoResponse;
}

export namespace InfoResponse {
  export type AsObject = {
    info?: InstanceInfo.AsObject,
  }
}

export class CancelJobRequest extends jspb.Message {
  getJid(): string;
  setJid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelJobRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CancelJobRequest): CancelJobRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CancelJobRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelJobRequest;
  static deserializeBinaryFromReader(message: CancelJobRequest, reader: jspb.BinaryReader): CancelJobRequest;
}

export namespace CancelJobRequest {
  export type AsObject = {
    jid: string,
  }
}

export class CancelJobResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CancelJobResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CancelJobResponse): CancelJobResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CancelJobResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CancelJobResponse;
  static deserializeBinaryFromReader(message: CancelJobResponse, reader: jspb.BinaryReader): CancelJobResponse;
}

export namespace CancelJobResponse {
  export type AsObject = {
  }
}

export class GetStorageJobRequest extends jspb.Message {
  getJid(): string;
  setJid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetStorageJobRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetStorageJobRequest): GetStorageJobRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetStorageJobRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetStorageJobRequest;
  static deserializeBinaryFromReader(message: GetStorageJobRequest, reader: jspb.BinaryReader): GetStorageJobRequest;
}

export namespace GetStorageJobRequest {
  export type AsObject = {
    jid: string,
  }
}

export class GetStorageJobResponse extends jspb.Message {
  hasJob(): boolean;
  clearJob(): void;
  getJob(): Job | undefined;
  setJob(value?: Job): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetStorageJobResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetStorageJobResponse): GetStorageJobResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetStorageJobResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetStorageJobResponse;
  static deserializeBinaryFromReader(message: GetStorageJobResponse, reader: jspb.BinaryReader): GetStorageJobResponse;
}

export namespace GetStorageJobResponse {
  export type AsObject = {
    job?: Job.AsObject,
  }
}

export class WatchJobsRequest extends jspb.Message {
  clearJidsList(): void;
  getJidsList(): Array<string>;
  setJidsList(value: Array<string>): void;
  addJids(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WatchJobsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: WatchJobsRequest): WatchJobsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: WatchJobsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WatchJobsRequest;
  static deserializeBinaryFromReader(message: WatchJobsRequest, reader: jspb.BinaryReader): WatchJobsRequest;
}

export namespace WatchJobsRequest {
  export type AsObject = {
    jidsList: Array<string>,
  }
}

export class WatchJobsResponse extends jspb.Message {
  hasJob(): boolean;
  clearJob(): void;
  getJob(): Job | undefined;
  setJob(value?: Job): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WatchJobsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: WatchJobsResponse): WatchJobsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: WatchJobsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WatchJobsResponse;
  static deserializeBinaryFromReader(message: WatchJobsResponse, reader: jspb.BinaryReader): WatchJobsResponse;
}

export namespace WatchJobsResponse {
  export type AsObject = {
    job?: Job.AsObject,
  }
}

export class WatchLogsRequest extends jspb.Message {
  getCid(): string;
  setCid(value: string): void;

  getJid(): string;
  setJid(value: string): void;

  getHistory(): boolean;
  setHistory(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WatchLogsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: WatchLogsRequest): WatchLogsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: WatchLogsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WatchLogsRequest;
  static deserializeBinaryFromReader(message: WatchLogsRequest, reader: jspb.BinaryReader): WatchLogsRequest;
}

export namespace WatchLogsRequest {
  export type AsObject = {
    cid: string,
    jid: string,
    history: boolean,
  }
}

export class WatchLogsResponse extends jspb.Message {
  hasLogEntry(): boolean;
  clearLogEntry(): void;
  getLogEntry(): LogEntry | undefined;
  setLogEntry(value?: LogEntry): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WatchLogsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: WatchLogsResponse): WatchLogsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: WatchLogsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WatchLogsResponse;
  static deserializeBinaryFromReader(message: WatchLogsResponse, reader: jspb.BinaryReader): WatchLogsResponse;
}

export namespace WatchLogsResponse {
  export type AsObject = {
    logEntry?: LogEntry.AsObject,
  }
}

export class ReplaceRequest extends jspb.Message {
  getCid1(): string;
  setCid1(value: string): void;

  getCid2(): string;
  setCid2(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReplaceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ReplaceRequest): ReplaceRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ReplaceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReplaceRequest;
  static deserializeBinaryFromReader(message: ReplaceRequest, reader: jspb.BinaryReader): ReplaceRequest;
}

export namespace ReplaceRequest {
  export type AsObject = {
    cid1: string,
    cid2: string,
  }
}

export class ReplaceResponse extends jspb.Message {
  getJobId(): string;
  setJobId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReplaceResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ReplaceResponse): ReplaceResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ReplaceResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReplaceResponse;
  static deserializeBinaryFromReader(message: ReplaceResponse, reader: jspb.BinaryReader): ReplaceResponse;
}

export namespace ReplaceResponse {
  export type AsObject = {
    jobId: string,
  }
}

export class PushStorageConfigRequest extends jspb.Message {
  getCid(): string;
  setCid(value: string): void;

  hasConfig(): boolean;
  clearConfig(): void;
  getConfig(): StorageConfig | undefined;
  setConfig(value?: StorageConfig): void;

  getHasConfig(): boolean;
  setHasConfig(value: boolean): void;

  getOverrideConfig(): boolean;
  setOverrideConfig(value: boolean): void;

  getHasOverrideConfig(): boolean;
  setHasOverrideConfig(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PushStorageConfigRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PushStorageConfigRequest): PushStorageConfigRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PushStorageConfigRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PushStorageConfigRequest;
  static deserializeBinaryFromReader(message: PushStorageConfigRequest, reader: jspb.BinaryReader): PushStorageConfigRequest;
}

export namespace PushStorageConfigRequest {
  export type AsObject = {
    cid: string,
    config?: StorageConfig.AsObject,
    hasConfig: boolean,
    overrideConfig: boolean,
    hasOverrideConfig: boolean,
  }
}

export class PushStorageConfigResponse extends jspb.Message {
  getJobId(): string;
  setJobId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PushStorageConfigResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PushStorageConfigResponse): PushStorageConfigResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PushStorageConfigResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PushStorageConfigResponse;
  static deserializeBinaryFromReader(message: PushStorageConfigResponse, reader: jspb.BinaryReader): PushStorageConfigResponse;
}

export namespace PushStorageConfigResponse {
  export type AsObject = {
    jobId: string,
  }
}

export class RemoveRequest extends jspb.Message {
  getCid(): string;
  setCid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RemoveRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RemoveRequest): RemoveRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RemoveRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RemoveRequest;
  static deserializeBinaryFromReader(message: RemoveRequest, reader: jspb.BinaryReader): RemoveRequest;
}

export namespace RemoveRequest {
  export type AsObject = {
    cid: string,
  }
}

export class RemoveResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RemoveResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RemoveResponse): RemoveResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RemoveResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RemoveResponse;
  static deserializeBinaryFromReader(message: RemoveResponse, reader: jspb.BinaryReader): RemoveResponse;
}

export namespace RemoveResponse {
  export type AsObject = {
  }
}

export class GetRequest extends jspb.Message {
  getCid(): string;
  setCid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetRequest): GetRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetRequest;
  static deserializeBinaryFromReader(message: GetRequest, reader: jspb.BinaryReader): GetRequest;
}

export namespace GetRequest {
  export type AsObject = {
    cid: string,
  }
}

export class GetResponse extends jspb.Message {
  getChunk(): Uint8Array | string;
  getChunk_asU8(): Uint8Array;
  getChunk_asB64(): string;
  setChunk(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetResponse): GetResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetResponse;
  static deserializeBinaryFromReader(message: GetResponse, reader: jspb.BinaryReader): GetResponse;
}

export namespace GetResponse {
  export type AsObject = {
    chunk: Uint8Array | string,
  }
}

export class SendFilRequest extends jspb.Message {
  getFrom(): string;
  setFrom(value: string): void;

  getTo(): string;
  setTo(value: string): void;

  getAmount(): number;
  setAmount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendFilRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SendFilRequest): SendFilRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendFilRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendFilRequest;
  static deserializeBinaryFromReader(message: SendFilRequest, reader: jspb.BinaryReader): SendFilRequest;
}

export namespace SendFilRequest {
  export type AsObject = {
    from: string,
    to: string,
    amount: number,
  }
}

export class SendFilResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SendFilResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SendFilResponse): SendFilResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SendFilResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SendFilResponse;
  static deserializeBinaryFromReader(message: SendFilResponse, reader: jspb.BinaryReader): SendFilResponse;
}

export namespace SendFilResponse {
  export type AsObject = {
  }
}

export class StageRequest extends jspb.Message {
  getChunk(): Uint8Array | string;
  getChunk_asU8(): Uint8Array;
  getChunk_asB64(): string;
  setChunk(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StageRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StageRequest): StageRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StageRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StageRequest;
  static deserializeBinaryFromReader(message: StageRequest, reader: jspb.BinaryReader): StageRequest;
}

export namespace StageRequest {
  export type AsObject = {
    chunk: Uint8Array | string,
  }
}

export class StageResponse extends jspb.Message {
  getCid(): string;
  setCid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StageResponse.AsObject;
  static toObject(includeInstance: boolean, msg: StageResponse): StageResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StageResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StageResponse;
  static deserializeBinaryFromReader(message: StageResponse, reader: jspb.BinaryReader): StageResponse;
}

export namespace StageResponse {
  export type AsObject = {
    cid: string,
  }
}

export class ListPayChannelsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListPayChannelsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListPayChannelsRequest): ListPayChannelsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListPayChannelsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListPayChannelsRequest;
  static deserializeBinaryFromReader(message: ListPayChannelsRequest, reader: jspb.BinaryReader): ListPayChannelsRequest;
}

export namespace ListPayChannelsRequest {
  export type AsObject = {
  }
}

export class ListPayChannelsResponse extends jspb.Message {
  clearPayChannelsList(): void;
  getPayChannelsList(): Array<PaychInfo>;
  setPayChannelsList(value: Array<PaychInfo>): void;
  addPayChannels(value?: PaychInfo, index?: number): PaychInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListPayChannelsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListPayChannelsResponse): ListPayChannelsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListPayChannelsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListPayChannelsResponse;
  static deserializeBinaryFromReader(message: ListPayChannelsResponse, reader: jspb.BinaryReader): ListPayChannelsResponse;
}

export namespace ListPayChannelsResponse {
  export type AsObject = {
    payChannelsList: Array<PaychInfo.AsObject>,
  }
}

export class CreatePayChannelRequest extends jspb.Message {
  getFrom(): string;
  setFrom(value: string): void;

  getTo(): string;
  setTo(value: string): void;

  getAmount(): number;
  setAmount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreatePayChannelRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreatePayChannelRequest): CreatePayChannelRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreatePayChannelRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreatePayChannelRequest;
  static deserializeBinaryFromReader(message: CreatePayChannelRequest, reader: jspb.BinaryReader): CreatePayChannelRequest;
}

export namespace CreatePayChannelRequest {
  export type AsObject = {
    from: string,
    to: string,
    amount: number,
  }
}

export class CreatePayChannelResponse extends jspb.Message {
  hasPayChannel(): boolean;
  clearPayChannel(): void;
  getPayChannel(): PaychInfo | undefined;
  setPayChannel(value?: PaychInfo): void;

  getChannelMessageCid(): string;
  setChannelMessageCid(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreatePayChannelResponse.AsObject;
  static toObject(includeInstance: boolean, msg: CreatePayChannelResponse): CreatePayChannelResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreatePayChannelResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreatePayChannelResponse;
  static deserializeBinaryFromReader(message: CreatePayChannelResponse, reader: jspb.BinaryReader): CreatePayChannelResponse;
}

export namespace CreatePayChannelResponse {
  export type AsObject = {
    payChannel?: PaychInfo.AsObject,
    channelMessageCid: string,
  }
}

export class RedeemPayChannelRequest extends jspb.Message {
  getPayChannelAddr(): string;
  setPayChannelAddr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RedeemPayChannelRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RedeemPayChannelRequest): RedeemPayChannelRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RedeemPayChannelRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RedeemPayChannelRequest;
  static deserializeBinaryFromReader(message: RedeemPayChannelRequest, reader: jspb.BinaryReader): RedeemPayChannelRequest;
}

export namespace RedeemPayChannelRequest {
  export type AsObject = {
    payChannelAddr: string,
  }
}

export class RedeemPayChannelResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RedeemPayChannelResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RedeemPayChannelResponse): RedeemPayChannelResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RedeemPayChannelResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RedeemPayChannelResponse;
  static deserializeBinaryFromReader(message: RedeemPayChannelResponse, reader: jspb.BinaryReader): RedeemPayChannelResponse;
}

export namespace RedeemPayChannelResponse {
  export type AsObject = {
  }
}

export class ListStorageDealRecordsRequest extends jspb.Message {
  hasConfig(): boolean;
  clearConfig(): void;
  getConfig(): ListDealRecordsConfig | undefined;
  setConfig(value?: ListDealRecordsConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListStorageDealRecordsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListStorageDealRecordsRequest): ListStorageDealRecordsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListStorageDealRecordsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListStorageDealRecordsRequest;
  static deserializeBinaryFromReader(message: ListStorageDealRecordsRequest, reader: jspb.BinaryReader): ListStorageDealRecordsRequest;
}

export namespace ListStorageDealRecordsRequest {
  export type AsObject = {
    config?: ListDealRecordsConfig.AsObject,
  }
}

export class ListStorageDealRecordsResponse extends jspb.Message {
  clearRecordsList(): void;
  getRecordsList(): Array<StorageDealRecord>;
  setRecordsList(value: Array<StorageDealRecord>): void;
  addRecords(value?: StorageDealRecord, index?: number): StorageDealRecord;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListStorageDealRecordsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListStorageDealRecordsResponse): ListStorageDealRecordsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListStorageDealRecordsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListStorageDealRecordsResponse;
  static deserializeBinaryFromReader(message: ListStorageDealRecordsResponse, reader: jspb.BinaryReader): ListStorageDealRecordsResponse;
}

export namespace ListStorageDealRecordsResponse {
  export type AsObject = {
    recordsList: Array<StorageDealRecord.AsObject>,
  }
}

export class ListRetrievalDealRecordsRequest extends jspb.Message {
  hasConfig(): boolean;
  clearConfig(): void;
  getConfig(): ListDealRecordsConfig | undefined;
  setConfig(value?: ListDealRecordsConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListRetrievalDealRecordsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListRetrievalDealRecordsRequest): ListRetrievalDealRecordsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListRetrievalDealRecordsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListRetrievalDealRecordsRequest;
  static deserializeBinaryFromReader(message: ListRetrievalDealRecordsRequest, reader: jspb.BinaryReader): ListRetrievalDealRecordsRequest;
}

export namespace ListRetrievalDealRecordsRequest {
  export type AsObject = {
    config?: ListDealRecordsConfig.AsObject,
  }
}

export class ListRetrievalDealRecordsResponse extends jspb.Message {
  clearRecordsList(): void;
  getRecordsList(): Array<RetrievalDealRecord>;
  setRecordsList(value: Array<RetrievalDealRecord>): void;
  addRecords(value?: RetrievalDealRecord, index?: number): RetrievalDealRecord;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListRetrievalDealRecordsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListRetrievalDealRecordsResponse): ListRetrievalDealRecordsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListRetrievalDealRecordsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListRetrievalDealRecordsResponse;
  static deserializeBinaryFromReader(message: ListRetrievalDealRecordsResponse, reader: jspb.BinaryReader): ListRetrievalDealRecordsResponse;
}

export namespace ListRetrievalDealRecordsResponse {
  export type AsObject = {
    recordsList: Array<RetrievalDealRecord.AsObject>,
  }
}

export class ShowAllRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ShowAllRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ShowAllRequest): ShowAllRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ShowAllRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ShowAllRequest;
  static deserializeBinaryFromReader(message: ShowAllRequest, reader: jspb.BinaryReader): ShowAllRequest;
}

export namespace ShowAllRequest {
  export type AsObject = {
  }
}

export class ShowAllResponse extends jspb.Message {
  clearCidInfosList(): void;
  getCidInfosList(): Array<CidInfo>;
  setCidInfosList(value: Array<CidInfo>): void;
  addCidInfos(value?: CidInfo, index?: number): CidInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ShowAllResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ShowAllResponse): ShowAllResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ShowAllResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ShowAllResponse;
  static deserializeBinaryFromReader(message: ShowAllResponse, reader: jspb.BinaryReader): ShowAllResponse;
}

export namespace ShowAllResponse {
  export type AsObject = {
    cidInfosList: Array<CidInfo.AsObject>,
  }
}

export interface JobStatusMap {
  JOB_STATUS_UNSPECIFIED: 0;
  JOB_STATUS_QUEUED: 1;
  JOB_STATUS_EXECUTING: 2;
  JOB_STATUS_FAILED: 3;
  JOB_STATUS_CANCELED: 4;
  JOB_STATUS_SUCCESS: 5;
}

export const JobStatus: JobStatusMap;

export interface DirectionMap {
  DIRECTION_UNSPECIFIED: 0;
  DIRECTION_INBOUND: 1;
  DIRECTION_OUTBOUND: 2;
}

export const Direction: DirectionMap;

