// source: ffs/rpc/rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ffs.rpc.AddrInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.AddrsRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.AddrsResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.BalanceInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.CancelJobRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.CancelJobResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.CidInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.ColdConfig', null, global);
goog.exportSymbol('proto.ffs.rpc.ColdInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.CreatePayChannelRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.CreatePayChannelResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.CreateRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.CreateResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.DealError', null, global);
goog.exportSymbol('proto.ffs.rpc.DefaultStorageConfigRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.DefaultStorageConfigResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.Direction', null, global);
goog.exportSymbol('proto.ffs.rpc.FilConfig', null, global);
goog.exportSymbol('proto.ffs.rpc.FilInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.FilRenew', null, global);
goog.exportSymbol('proto.ffs.rpc.FilStorage', null, global);
goog.exportSymbol('proto.ffs.rpc.GetRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.GetResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.GetStorageConfigRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.GetStorageConfigResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.GetStorageJobRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.GetStorageJobResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.HotConfig', null, global);
goog.exportSymbol('proto.ffs.rpc.HotInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.IDRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.IDResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.InfoRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.InfoResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.InstanceInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.IpfsConfig', null, global);
goog.exportSymbol('proto.ffs.rpc.IpfsHotInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.Job', null, global);
goog.exportSymbol('proto.ffs.rpc.JobStatus', null, global);
goog.exportSymbol('proto.ffs.rpc.ListAPIRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.ListAPIResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.ListDealRecordsConfig', null, global);
goog.exportSymbol('proto.ffs.rpc.ListPayChannelsRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.ListPayChannelsResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.ListRetrievalDealRecordsRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.ListRetrievalDealRecordsResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.ListStorageDealRecordsRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.ListStorageDealRecordsResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.LogEntry', null, global);
goog.exportSymbol('proto.ffs.rpc.NewAddrRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.NewAddrResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.PaychInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.PushStorageConfigRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.PushStorageConfigResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.RedeemPayChannelRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.RedeemPayChannelResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.RemoveRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.RemoveResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.ReplaceRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.ReplaceResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.RetrievalDealInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.RetrievalDealRecord', null, global);
goog.exportSymbol('proto.ffs.rpc.SendFilRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.SendFilResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.SetDefaultStorageConfigRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.SetDefaultStorageConfigResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.ShowAllRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.ShowAllResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.ShowRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.ShowResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.StageRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.StageResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.StorageConfig', null, global);
goog.exportSymbol('proto.ffs.rpc.StorageDealInfo', null, global);
goog.exportSymbol('proto.ffs.rpc.StorageDealRecord', null, global);
goog.exportSymbol('proto.ffs.rpc.WatchJobsRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.WatchJobsResponse', null, global);
goog.exportSymbol('proto.ffs.rpc.WatchLogsRequest', null, global);
goog.exportSymbol('proto.ffs.rpc.WatchLogsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.AddrInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.AddrInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.AddrInfo.displayName = 'proto.ffs.rpc.AddrInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.IpfsConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.IpfsConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.IpfsConfig.displayName = 'proto.ffs.rpc.IpfsConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.HotConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.HotConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.HotConfig.displayName = 'proto.ffs.rpc.HotConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.FilRenew = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.FilRenew, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.FilRenew.displayName = 'proto.ffs.rpc.FilRenew';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.FilConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.FilConfig.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.FilConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.FilConfig.displayName = 'proto.ffs.rpc.FilConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ColdConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ColdConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ColdConfig.displayName = 'proto.ffs.rpc.ColdConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.StorageConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.StorageConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.StorageConfig.displayName = 'proto.ffs.rpc.StorageConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.IpfsHotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.IpfsHotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.IpfsHotInfo.displayName = 'proto.ffs.rpc.IpfsHotInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.HotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.HotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.HotInfo.displayName = 'proto.ffs.rpc.HotInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.FilStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.FilStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.FilStorage.displayName = 'proto.ffs.rpc.FilStorage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.FilInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.FilInfo.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.FilInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.FilInfo.displayName = 'proto.ffs.rpc.FilInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ColdInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ColdInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ColdInfo.displayName = 'proto.ffs.rpc.ColdInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.CidInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.CidInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.CidInfo.displayName = 'proto.ffs.rpc.CidInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.BalanceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.BalanceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.BalanceInfo.displayName = 'proto.ffs.rpc.BalanceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.InstanceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.InstanceInfo.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.InstanceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.InstanceInfo.displayName = 'proto.ffs.rpc.InstanceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.Job = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.Job.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.Job, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.Job.displayName = 'proto.ffs.rpc.Job';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.DealError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.DealError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.DealError.displayName = 'proto.ffs.rpc.DealError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.LogEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.LogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.LogEntry.displayName = 'proto.ffs.rpc.LogEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.PaychInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.PaychInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.PaychInfo.displayName = 'proto.ffs.rpc.PaychInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListDealRecordsConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.ListDealRecordsConfig.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.ListDealRecordsConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListDealRecordsConfig.displayName = 'proto.ffs.rpc.ListDealRecordsConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.StorageDealInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.StorageDealInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.StorageDealInfo.displayName = 'proto.ffs.rpc.StorageDealInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.StorageDealRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.StorageDealRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.StorageDealRecord.displayName = 'proto.ffs.rpc.StorageDealRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.RetrievalDealInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.RetrievalDealInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.RetrievalDealInfo.displayName = 'proto.ffs.rpc.RetrievalDealInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.RetrievalDealRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.RetrievalDealRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.RetrievalDealRecord.displayName = 'proto.ffs.rpc.RetrievalDealRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.CreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.CreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.CreateRequest.displayName = 'proto.ffs.rpc.CreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.CreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.CreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.CreateResponse.displayName = 'proto.ffs.rpc.CreateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListAPIRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ListAPIRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListAPIRequest.displayName = 'proto.ffs.rpc.ListAPIRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListAPIResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.ListAPIResponse.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.ListAPIResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListAPIResponse.displayName = 'proto.ffs.rpc.ListAPIResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.IDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.IDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.IDRequest.displayName = 'proto.ffs.rpc.IDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.IDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.IDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.IDResponse.displayName = 'proto.ffs.rpc.IDResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.AddrsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.AddrsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.AddrsRequest.displayName = 'proto.ffs.rpc.AddrsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.AddrsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.AddrsResponse.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.AddrsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.AddrsResponse.displayName = 'proto.ffs.rpc.AddrsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.DefaultStorageConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.DefaultStorageConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.DefaultStorageConfigRequest.displayName = 'proto.ffs.rpc.DefaultStorageConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.DefaultStorageConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.DefaultStorageConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.DefaultStorageConfigResponse.displayName = 'proto.ffs.rpc.DefaultStorageConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.NewAddrRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.NewAddrRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.NewAddrRequest.displayName = 'proto.ffs.rpc.NewAddrRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.NewAddrResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.NewAddrResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.NewAddrResponse.displayName = 'proto.ffs.rpc.NewAddrResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.GetStorageConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.GetStorageConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.GetStorageConfigRequest.displayName = 'proto.ffs.rpc.GetStorageConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.GetStorageConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.GetStorageConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.GetStorageConfigResponse.displayName = 'proto.ffs.rpc.GetStorageConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.SetDefaultStorageConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.SetDefaultStorageConfigRequest.displayName = 'proto.ffs.rpc.SetDefaultStorageConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.SetDefaultStorageConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.SetDefaultStorageConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.SetDefaultStorageConfigResponse.displayName = 'proto.ffs.rpc.SetDefaultStorageConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ShowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ShowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ShowRequest.displayName = 'proto.ffs.rpc.ShowRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ShowResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ShowResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ShowResponse.displayName = 'proto.ffs.rpc.ShowResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.InfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.InfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.InfoRequest.displayName = 'proto.ffs.rpc.InfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.InfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.InfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.InfoResponse.displayName = 'proto.ffs.rpc.InfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.CancelJobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.CancelJobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.CancelJobRequest.displayName = 'proto.ffs.rpc.CancelJobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.CancelJobResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.CancelJobResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.CancelJobResponse.displayName = 'proto.ffs.rpc.CancelJobResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.GetStorageJobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.GetStorageJobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.GetStorageJobRequest.displayName = 'proto.ffs.rpc.GetStorageJobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.GetStorageJobResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.GetStorageJobResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.GetStorageJobResponse.displayName = 'proto.ffs.rpc.GetStorageJobResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.WatchJobsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.WatchJobsRequest.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.WatchJobsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.WatchJobsRequest.displayName = 'proto.ffs.rpc.WatchJobsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.WatchJobsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.WatchJobsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.WatchJobsResponse.displayName = 'proto.ffs.rpc.WatchJobsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.WatchLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.WatchLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.WatchLogsRequest.displayName = 'proto.ffs.rpc.WatchLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.WatchLogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.WatchLogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.WatchLogsResponse.displayName = 'proto.ffs.rpc.WatchLogsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ReplaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ReplaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ReplaceRequest.displayName = 'proto.ffs.rpc.ReplaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ReplaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ReplaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ReplaceResponse.displayName = 'proto.ffs.rpc.ReplaceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.PushStorageConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.PushStorageConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.PushStorageConfigRequest.displayName = 'proto.ffs.rpc.PushStorageConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.PushStorageConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.PushStorageConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.PushStorageConfigResponse.displayName = 'proto.ffs.rpc.PushStorageConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.RemoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.RemoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.RemoveRequest.displayName = 'proto.ffs.rpc.RemoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.RemoveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.RemoveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.RemoveResponse.displayName = 'proto.ffs.rpc.RemoveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.GetRequest.displayName = 'proto.ffs.rpc.GetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.GetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.GetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.GetResponse.displayName = 'proto.ffs.rpc.GetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.SendFilRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.SendFilRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.SendFilRequest.displayName = 'proto.ffs.rpc.SendFilRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.SendFilResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.SendFilResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.SendFilResponse.displayName = 'proto.ffs.rpc.SendFilResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.StageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.StageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.StageRequest.displayName = 'proto.ffs.rpc.StageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.StageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.StageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.StageResponse.displayName = 'proto.ffs.rpc.StageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListPayChannelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ListPayChannelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListPayChannelsRequest.displayName = 'proto.ffs.rpc.ListPayChannelsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListPayChannelsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.ListPayChannelsResponse.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.ListPayChannelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListPayChannelsResponse.displayName = 'proto.ffs.rpc.ListPayChannelsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.CreatePayChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.CreatePayChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.CreatePayChannelRequest.displayName = 'proto.ffs.rpc.CreatePayChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.CreatePayChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.CreatePayChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.CreatePayChannelResponse.displayName = 'proto.ffs.rpc.CreatePayChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.RedeemPayChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.RedeemPayChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.RedeemPayChannelRequest.displayName = 'proto.ffs.rpc.RedeemPayChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.RedeemPayChannelResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.RedeemPayChannelResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.RedeemPayChannelResponse.displayName = 'proto.ffs.rpc.RedeemPayChannelResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListStorageDealRecordsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ListStorageDealRecordsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListStorageDealRecordsRequest.displayName = 'proto.ffs.rpc.ListStorageDealRecordsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListStorageDealRecordsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.ListStorageDealRecordsResponse.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.ListStorageDealRecordsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListStorageDealRecordsResponse.displayName = 'proto.ffs.rpc.ListStorageDealRecordsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ListRetrievalDealRecordsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListRetrievalDealRecordsRequest.displayName = 'proto.ffs.rpc.ListRetrievalDealRecordsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.ListRetrievalDealRecordsResponse.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.ListRetrievalDealRecordsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ListRetrievalDealRecordsResponse.displayName = 'proto.ffs.rpc.ListRetrievalDealRecordsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ShowAllRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ffs.rpc.ShowAllRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ShowAllRequest.displayName = 'proto.ffs.rpc.ShowAllRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ffs.rpc.ShowAllResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ffs.rpc.ShowAllResponse.repeatedFields_, null);
};
goog.inherits(proto.ffs.rpc.ShowAllResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ffs.rpc.ShowAllResponse.displayName = 'proto.ffs.rpc.ShowAllResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.AddrInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.AddrInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.AddrInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.AddrInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.AddrInfo}
 */
proto.ffs.rpc.AddrInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.AddrInfo;
  return proto.ffs.rpc.AddrInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.AddrInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.AddrInfo}
 */
proto.ffs.rpc.AddrInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.AddrInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.AddrInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.AddrInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.AddrInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ffs.rpc.AddrInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.AddrInfo} returns this
 */
proto.ffs.rpc.AddrInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string addr = 2;
 * @return {string}
 */
proto.ffs.rpc.AddrInfo.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.AddrInfo} returns this
 */
proto.ffs.rpc.AddrInfo.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.ffs.rpc.AddrInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.AddrInfo} returns this
 */
proto.ffs.rpc.AddrInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.IpfsConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.IpfsConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.IpfsConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.IpfsConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    addTimeout: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.IpfsConfig}
 */
proto.ffs.rpc.IpfsConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.IpfsConfig;
  return proto.ffs.rpc.IpfsConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.IpfsConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.IpfsConfig}
 */
proto.ffs.rpc.IpfsConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.IpfsConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.IpfsConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.IpfsConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.IpfsConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddTimeout();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 add_timeout = 1;
 * @return {number}
 */
proto.ffs.rpc.IpfsConfig.prototype.getAddTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.IpfsConfig} returns this
 */
proto.ffs.rpc.IpfsConfig.prototype.setAddTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.HotConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.HotConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.HotConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.HotConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    allowUnfreeze: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    unfreezeMaxPrice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ipfs: (f = msg.getIpfs()) && proto.ffs.rpc.IpfsConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.HotConfig}
 */
proto.ffs.rpc.HotConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.HotConfig;
  return proto.ffs.rpc.HotConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.HotConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.HotConfig}
 */
proto.ffs.rpc.HotConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowUnfreeze(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnfreezeMaxPrice(value);
      break;
    case 4:
      var value = new proto.ffs.rpc.IpfsConfig;
      reader.readMessage(value,proto.ffs.rpc.IpfsConfig.deserializeBinaryFromReader);
      msg.setIpfs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.HotConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.HotConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.HotConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.HotConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAllowUnfreeze();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUnfreezeMaxPrice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIpfs();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ffs.rpc.IpfsConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.ffs.rpc.HotConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.HotConfig} returns this
 */
proto.ffs.rpc.HotConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool allow_unfreeze = 2;
 * @return {boolean}
 */
proto.ffs.rpc.HotConfig.prototype.getAllowUnfreeze = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.HotConfig} returns this
 */
proto.ffs.rpc.HotConfig.prototype.setAllowUnfreeze = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint64 unfreeze_max_price = 3;
 * @return {number}
 */
proto.ffs.rpc.HotConfig.prototype.getUnfreezeMaxPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.HotConfig} returns this
 */
proto.ffs.rpc.HotConfig.prototype.setUnfreezeMaxPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional IpfsConfig ipfs = 4;
 * @return {?proto.ffs.rpc.IpfsConfig}
 */
proto.ffs.rpc.HotConfig.prototype.getIpfs = function() {
  return /** @type{?proto.ffs.rpc.IpfsConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.IpfsConfig, 4));
};


/**
 * @param {?proto.ffs.rpc.IpfsConfig|undefined} value
 * @return {!proto.ffs.rpc.HotConfig} returns this
*/
proto.ffs.rpc.HotConfig.prototype.setIpfs = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.HotConfig} returns this
 */
proto.ffs.rpc.HotConfig.prototype.clearIpfs = function() {
  return this.setIpfs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.HotConfig.prototype.hasIpfs = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.FilRenew.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.FilRenew.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.FilRenew} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.FilRenew.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    threshold: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.FilRenew}
 */
proto.ffs.rpc.FilRenew.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.FilRenew;
  return proto.ffs.rpc.FilRenew.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.FilRenew} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.FilRenew}
 */
proto.ffs.rpc.FilRenew.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.FilRenew.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.FilRenew.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.FilRenew} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.FilRenew.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.ffs.rpc.FilRenew.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.FilRenew} returns this
 */
proto.ffs.rpc.FilRenew.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 threshold = 2;
 * @return {number}
 */
proto.ffs.rpc.FilRenew.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilRenew} returns this
 */
proto.ffs.rpc.FilRenew.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.FilConfig.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.FilConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.FilConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.FilConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.FilConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    repFactor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dealMinDuration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    excludedMinersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    trustedMinersList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    countryCodesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    renew: (f = msg.getRenew()) && proto.ffs.rpc.FilRenew.toObject(includeInstance, f),
    addr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    maxPrice: jspb.Message.getFieldWithDefault(msg, 8, 0),
    fastRetrieval: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    dealStartOffset: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.FilConfig}
 */
proto.ffs.rpc.FilConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.FilConfig;
  return proto.ffs.rpc.FilConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.FilConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.FilConfig}
 */
proto.ffs.rpc.FilConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRepFactor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDealMinDuration(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addExcludedMiners(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTrustedMiners(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addCountryCodes(value);
      break;
    case 6:
      var value = new proto.ffs.rpc.FilRenew;
      reader.readMessage(value,proto.ffs.rpc.FilRenew.deserializeBinaryFromReader);
      msg.setRenew(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxPrice(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFastRetrieval(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDealStartOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.FilConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.FilConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.FilConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.FilConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepFactor();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDealMinDuration();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getExcludedMinersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTrustedMinersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getCountryCodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getRenew();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ffs.rpc.FilRenew.serializeBinaryToWriter
    );
  }
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMaxPrice();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getFastRetrieval();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getDealStartOffset();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional int64 rep_factor = 1;
 * @return {number}
 */
proto.ffs.rpc.FilConfig.prototype.getRepFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setRepFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 deal_min_duration = 2;
 * @return {number}
 */
proto.ffs.rpc.FilConfig.prototype.getDealMinDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setDealMinDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string excluded_miners = 3;
 * @return {!Array<string>}
 */
proto.ffs.rpc.FilConfig.prototype.getExcludedMinersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setExcludedMinersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.addExcludedMiners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.clearExcludedMinersList = function() {
  return this.setExcludedMinersList([]);
};


/**
 * repeated string trusted_miners = 4;
 * @return {!Array<string>}
 */
proto.ffs.rpc.FilConfig.prototype.getTrustedMinersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setTrustedMinersList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.addTrustedMiners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.clearTrustedMinersList = function() {
  return this.setTrustedMinersList([]);
};


/**
 * repeated string country_codes = 5;
 * @return {!Array<string>}
 */
proto.ffs.rpc.FilConfig.prototype.getCountryCodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setCountryCodesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.addCountryCodes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.clearCountryCodesList = function() {
  return this.setCountryCodesList([]);
};


/**
 * optional FilRenew renew = 6;
 * @return {?proto.ffs.rpc.FilRenew}
 */
proto.ffs.rpc.FilConfig.prototype.getRenew = function() {
  return /** @type{?proto.ffs.rpc.FilRenew} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.FilRenew, 6));
};


/**
 * @param {?proto.ffs.rpc.FilRenew|undefined} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
*/
proto.ffs.rpc.FilConfig.prototype.setRenew = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.clearRenew = function() {
  return this.setRenew(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.FilConfig.prototype.hasRenew = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string addr = 7;
 * @return {string}
 */
proto.ffs.rpc.FilConfig.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 max_price = 8;
 * @return {number}
 */
proto.ffs.rpc.FilConfig.prototype.getMaxPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setMaxPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool fast_retrieval = 9;
 * @return {boolean}
 */
proto.ffs.rpc.FilConfig.prototype.getFastRetrieval = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setFastRetrieval = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional int64 deal_start_offset = 10;
 * @return {number}
 */
proto.ffs.rpc.FilConfig.prototype.getDealStartOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilConfig} returns this
 */
proto.ffs.rpc.FilConfig.prototype.setDealStartOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ColdConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ColdConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ColdConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ColdConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    filecoin: (f = msg.getFilecoin()) && proto.ffs.rpc.FilConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ColdConfig}
 */
proto.ffs.rpc.ColdConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ColdConfig;
  return proto.ffs.rpc.ColdConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ColdConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ColdConfig}
 */
proto.ffs.rpc.ColdConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = new proto.ffs.rpc.FilConfig;
      reader.readMessage(value,proto.ffs.rpc.FilConfig.deserializeBinaryFromReader);
      msg.setFilecoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ColdConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ColdConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ColdConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ColdConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFilecoin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ffs.rpc.FilConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.ffs.rpc.ColdConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.ColdConfig} returns this
 */
proto.ffs.rpc.ColdConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional FilConfig filecoin = 2;
 * @return {?proto.ffs.rpc.FilConfig}
 */
proto.ffs.rpc.ColdConfig.prototype.getFilecoin = function() {
  return /** @type{?proto.ffs.rpc.FilConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.FilConfig, 2));
};


/**
 * @param {?proto.ffs.rpc.FilConfig|undefined} value
 * @return {!proto.ffs.rpc.ColdConfig} returns this
*/
proto.ffs.rpc.ColdConfig.prototype.setFilecoin = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.ColdConfig} returns this
 */
proto.ffs.rpc.ColdConfig.prototype.clearFilecoin = function() {
  return this.setFilecoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.ColdConfig.prototype.hasFilecoin = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.StorageConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.StorageConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.StorageConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StorageConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    hot: (f = msg.getHot()) && proto.ffs.rpc.HotConfig.toObject(includeInstance, f),
    cold: (f = msg.getCold()) && proto.ffs.rpc.ColdConfig.toObject(includeInstance, f),
    repairable: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.StorageConfig}
 */
proto.ffs.rpc.StorageConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.StorageConfig;
  return proto.ffs.rpc.StorageConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.StorageConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.StorageConfig}
 */
proto.ffs.rpc.StorageConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.HotConfig;
      reader.readMessage(value,proto.ffs.rpc.HotConfig.deserializeBinaryFromReader);
      msg.setHot(value);
      break;
    case 2:
      var value = new proto.ffs.rpc.ColdConfig;
      reader.readMessage(value,proto.ffs.rpc.ColdConfig.deserializeBinaryFromReader);
      msg.setCold(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRepairable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.StorageConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.StorageConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.StorageConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StorageConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.HotConfig.serializeBinaryToWriter
    );
  }
  f = message.getCold();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ffs.rpc.ColdConfig.serializeBinaryToWriter
    );
  }
  f = message.getRepairable();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional HotConfig hot = 1;
 * @return {?proto.ffs.rpc.HotConfig}
 */
proto.ffs.rpc.StorageConfig.prototype.getHot = function() {
  return /** @type{?proto.ffs.rpc.HotConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.HotConfig, 1));
};


/**
 * @param {?proto.ffs.rpc.HotConfig|undefined} value
 * @return {!proto.ffs.rpc.StorageConfig} returns this
*/
proto.ffs.rpc.StorageConfig.prototype.setHot = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.StorageConfig} returns this
 */
proto.ffs.rpc.StorageConfig.prototype.clearHot = function() {
  return this.setHot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.StorageConfig.prototype.hasHot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ColdConfig cold = 2;
 * @return {?proto.ffs.rpc.ColdConfig}
 */
proto.ffs.rpc.StorageConfig.prototype.getCold = function() {
  return /** @type{?proto.ffs.rpc.ColdConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.ColdConfig, 2));
};


/**
 * @param {?proto.ffs.rpc.ColdConfig|undefined} value
 * @return {!proto.ffs.rpc.StorageConfig} returns this
*/
proto.ffs.rpc.StorageConfig.prototype.setCold = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.StorageConfig} returns this
 */
proto.ffs.rpc.StorageConfig.prototype.clearCold = function() {
  return this.setCold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.StorageConfig.prototype.hasCold = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool repairable = 3;
 * @return {boolean}
 */
proto.ffs.rpc.StorageConfig.prototype.getRepairable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.StorageConfig} returns this
 */
proto.ffs.rpc.StorageConfig.prototype.setRepairable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.IpfsHotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.IpfsHotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.IpfsHotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.IpfsHotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    created: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.IpfsHotInfo}
 */
proto.ffs.rpc.IpfsHotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.IpfsHotInfo;
  return proto.ffs.rpc.IpfsHotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.IpfsHotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.IpfsHotInfo}
 */
proto.ffs.rpc.IpfsHotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.IpfsHotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.IpfsHotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.IpfsHotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.IpfsHotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreated();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 created = 1;
 * @return {number}
 */
proto.ffs.rpc.IpfsHotInfo.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.IpfsHotInfo} returns this
 */
proto.ffs.rpc.IpfsHotInfo.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.HotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.HotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.HotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.HotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ipfs: (f = msg.getIpfs()) && proto.ffs.rpc.IpfsHotInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.HotInfo}
 */
proto.ffs.rpc.HotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.HotInfo;
  return proto.ffs.rpc.HotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.HotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.HotInfo}
 */
proto.ffs.rpc.HotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 3:
      var value = new proto.ffs.rpc.IpfsHotInfo;
      reader.readMessage(value,proto.ffs.rpc.IpfsHotInfo.deserializeBinaryFromReader);
      msg.setIpfs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.HotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.HotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.HotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.HotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIpfs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ffs.rpc.IpfsHotInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.ffs.rpc.HotInfo.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.HotInfo} returns this
 */
proto.ffs.rpc.HotInfo.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 size = 2;
 * @return {number}
 */
proto.ffs.rpc.HotInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.HotInfo} returns this
 */
proto.ffs.rpc.HotInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional IpfsHotInfo ipfs = 3;
 * @return {?proto.ffs.rpc.IpfsHotInfo}
 */
proto.ffs.rpc.HotInfo.prototype.getIpfs = function() {
  return /** @type{?proto.ffs.rpc.IpfsHotInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.IpfsHotInfo, 3));
};


/**
 * @param {?proto.ffs.rpc.IpfsHotInfo|undefined} value
 * @return {!proto.ffs.rpc.HotInfo} returns this
*/
proto.ffs.rpc.HotInfo.prototype.setIpfs = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.HotInfo} returns this
 */
proto.ffs.rpc.HotInfo.prototype.clearIpfs = function() {
  return this.setIpfs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.HotInfo.prototype.hasIpfs = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.FilStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.FilStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.FilStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.FilStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalCid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    renewed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    activationEpoch: jspb.Message.getFieldWithDefault(msg, 4, 0),
    startEpoch: jspb.Message.getFieldWithDefault(msg, 5, 0),
    miner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    epochPrice: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pieceCid: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.FilStorage}
 */
proto.ffs.rpc.FilStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.FilStorage;
  return proto.ffs.rpc.FilStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.FilStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.FilStorage}
 */
proto.ffs.rpc.FilStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposalCid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRenewed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActivationEpoch(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartEpoch(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochPrice(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPieceCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.FilStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.FilStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.FilStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.FilStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRenewed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getActivationEpoch();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStartEpoch();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEpochPrice();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getPieceCid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string proposal_cid = 1;
 * @return {string}
 */
proto.ffs.rpc.FilStorage.prototype.getProposalCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.FilStorage} returns this
 */
proto.ffs.rpc.FilStorage.prototype.setProposalCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool renewed = 2;
 * @return {boolean}
 */
proto.ffs.rpc.FilStorage.prototype.getRenewed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.FilStorage} returns this
 */
proto.ffs.rpc.FilStorage.prototype.setRenewed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 duration = 3;
 * @return {number}
 */
proto.ffs.rpc.FilStorage.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilStorage} returns this
 */
proto.ffs.rpc.FilStorage.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 activation_epoch = 4;
 * @return {number}
 */
proto.ffs.rpc.FilStorage.prototype.getActivationEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilStorage} returns this
 */
proto.ffs.rpc.FilStorage.prototype.setActivationEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 start_epoch = 5;
 * @return {number}
 */
proto.ffs.rpc.FilStorage.prototype.getStartEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilStorage} returns this
 */
proto.ffs.rpc.FilStorage.prototype.setStartEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string miner = 6;
 * @return {string}
 */
proto.ffs.rpc.FilStorage.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.FilStorage} returns this
 */
proto.ffs.rpc.FilStorage.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 epoch_price = 7;
 * @return {number}
 */
proto.ffs.rpc.FilStorage.prototype.getEpochPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilStorage} returns this
 */
proto.ffs.rpc.FilStorage.prototype.setEpochPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string piece_cid = 8;
 * @return {string}
 */
proto.ffs.rpc.FilStorage.prototype.getPieceCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.FilStorage} returns this
 */
proto.ffs.rpc.FilStorage.prototype.setPieceCid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.FilInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.FilInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.FilInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.FilInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.FilInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataCid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    proposalsList: jspb.Message.toObjectList(msg.getProposalsList(),
    proto.ffs.rpc.FilStorage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.FilInfo}
 */
proto.ffs.rpc.FilInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.FilInfo;
  return proto.ffs.rpc.FilInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.FilInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.FilInfo}
 */
proto.ffs.rpc.FilInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 3:
      var value = new proto.ffs.rpc.FilStorage;
      reader.readMessage(value,proto.ffs.rpc.FilStorage.deserializeBinaryFromReader);
      msg.addProposals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.FilInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.FilInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.FilInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.FilInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getProposalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ffs.rpc.FilStorage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string data_cid = 1;
 * @return {string}
 */
proto.ffs.rpc.FilInfo.prototype.getDataCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.FilInfo} returns this
 */
proto.ffs.rpc.FilInfo.prototype.setDataCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.ffs.rpc.FilInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.FilInfo} returns this
 */
proto.ffs.rpc.FilInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated FilStorage proposals = 3;
 * @return {!Array<!proto.ffs.rpc.FilStorage>}
 */
proto.ffs.rpc.FilInfo.prototype.getProposalsList = function() {
  return /** @type{!Array<!proto.ffs.rpc.FilStorage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffs.rpc.FilStorage, 3));
};


/**
 * @param {!Array<!proto.ffs.rpc.FilStorage>} value
 * @return {!proto.ffs.rpc.FilInfo} returns this
*/
proto.ffs.rpc.FilInfo.prototype.setProposalsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ffs.rpc.FilStorage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.FilStorage}
 */
proto.ffs.rpc.FilInfo.prototype.addProposals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ffs.rpc.FilStorage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.FilInfo} returns this
 */
proto.ffs.rpc.FilInfo.prototype.clearProposalsList = function() {
  return this.setProposalsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ColdInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ColdInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ColdInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ColdInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    filecoin: (f = msg.getFilecoin()) && proto.ffs.rpc.FilInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ColdInfo}
 */
proto.ffs.rpc.ColdInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ColdInfo;
  return proto.ffs.rpc.ColdInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ColdInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ColdInfo}
 */
proto.ffs.rpc.ColdInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = new proto.ffs.rpc.FilInfo;
      reader.readMessage(value,proto.ffs.rpc.FilInfo.deserializeBinaryFromReader);
      msg.setFilecoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ColdInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ColdInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ColdInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ColdInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFilecoin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ffs.rpc.FilInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.ffs.rpc.ColdInfo.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.ColdInfo} returns this
 */
proto.ffs.rpc.ColdInfo.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional FilInfo filecoin = 2;
 * @return {?proto.ffs.rpc.FilInfo}
 */
proto.ffs.rpc.ColdInfo.prototype.getFilecoin = function() {
  return /** @type{?proto.ffs.rpc.FilInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.FilInfo, 2));
};


/**
 * @param {?proto.ffs.rpc.FilInfo|undefined} value
 * @return {!proto.ffs.rpc.ColdInfo} returns this
*/
proto.ffs.rpc.ColdInfo.prototype.setFilecoin = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.ColdInfo} returns this
 */
proto.ffs.rpc.ColdInfo.prototype.clearFilecoin = function() {
  return this.setFilecoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.ColdInfo.prototype.hasFilecoin = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.CidInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.CidInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.CidInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CidInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    created: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hot: (f = msg.getHot()) && proto.ffs.rpc.HotInfo.toObject(includeInstance, f),
    cold: (f = msg.getCold()) && proto.ffs.rpc.ColdInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.CidInfo}
 */
proto.ffs.rpc.CidInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.CidInfo;
  return proto.ffs.rpc.CidInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.CidInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.CidInfo}
 */
proto.ffs.rpc.CidInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 4:
      var value = new proto.ffs.rpc.HotInfo;
      reader.readMessage(value,proto.ffs.rpc.HotInfo.deserializeBinaryFromReader);
      msg.setHot(value);
      break;
    case 5:
      var value = new proto.ffs.rpc.ColdInfo;
      reader.readMessage(value,proto.ffs.rpc.ColdInfo.deserializeBinaryFromReader);
      msg.setCold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.CidInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.CidInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.CidInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CidInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ffs.rpc.HotInfo.serializeBinaryToWriter
    );
  }
  f = message.getCold();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ffs.rpc.ColdInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string job_id = 1;
 * @return {string}
 */
proto.ffs.rpc.CidInfo.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.CidInfo} returns this
 */
proto.ffs.rpc.CidInfo.prototype.setJobId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cid = 2;
 * @return {string}
 */
proto.ffs.rpc.CidInfo.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.CidInfo} returns this
 */
proto.ffs.rpc.CidInfo.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 created = 3;
 * @return {number}
 */
proto.ffs.rpc.CidInfo.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.CidInfo} returns this
 */
proto.ffs.rpc.CidInfo.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional HotInfo hot = 4;
 * @return {?proto.ffs.rpc.HotInfo}
 */
proto.ffs.rpc.CidInfo.prototype.getHot = function() {
  return /** @type{?proto.ffs.rpc.HotInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.HotInfo, 4));
};


/**
 * @param {?proto.ffs.rpc.HotInfo|undefined} value
 * @return {!proto.ffs.rpc.CidInfo} returns this
*/
proto.ffs.rpc.CidInfo.prototype.setHot = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.CidInfo} returns this
 */
proto.ffs.rpc.CidInfo.prototype.clearHot = function() {
  return this.setHot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.CidInfo.prototype.hasHot = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ColdInfo cold = 5;
 * @return {?proto.ffs.rpc.ColdInfo}
 */
proto.ffs.rpc.CidInfo.prototype.getCold = function() {
  return /** @type{?proto.ffs.rpc.ColdInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.ColdInfo, 5));
};


/**
 * @param {?proto.ffs.rpc.ColdInfo|undefined} value
 * @return {!proto.ffs.rpc.CidInfo} returns this
*/
proto.ffs.rpc.CidInfo.prototype.setCold = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.CidInfo} returns this
 */
proto.ffs.rpc.CidInfo.prototype.clearCold = function() {
  return this.setCold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.CidInfo.prototype.hasCold = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.BalanceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.BalanceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.BalanceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.BalanceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: (f = msg.getAddr()) && proto.ffs.rpc.AddrInfo.toObject(includeInstance, f),
    balance: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.BalanceInfo}
 */
proto.ffs.rpc.BalanceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.BalanceInfo;
  return proto.ffs.rpc.BalanceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.BalanceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.BalanceInfo}
 */
proto.ffs.rpc.BalanceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.AddrInfo;
      reader.readMessage(value,proto.ffs.rpc.AddrInfo.deserializeBinaryFromReader);
      msg.setAddr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.BalanceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.BalanceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.BalanceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.BalanceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.AddrInfo.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional AddrInfo addr = 1;
 * @return {?proto.ffs.rpc.AddrInfo}
 */
proto.ffs.rpc.BalanceInfo.prototype.getAddr = function() {
  return /** @type{?proto.ffs.rpc.AddrInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.AddrInfo, 1));
};


/**
 * @param {?proto.ffs.rpc.AddrInfo|undefined} value
 * @return {!proto.ffs.rpc.BalanceInfo} returns this
*/
proto.ffs.rpc.BalanceInfo.prototype.setAddr = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.BalanceInfo} returns this
 */
proto.ffs.rpc.BalanceInfo.prototype.clearAddr = function() {
  return this.setAddr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.BalanceInfo.prototype.hasAddr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 balance = 2;
 * @return {number}
 */
proto.ffs.rpc.BalanceInfo.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.BalanceInfo} returns this
 */
proto.ffs.rpc.BalanceInfo.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.InstanceInfo.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.InstanceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.InstanceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.InstanceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.InstanceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    defaultStorageConfig: (f = msg.getDefaultStorageConfig()) && proto.ffs.rpc.StorageConfig.toObject(includeInstance, f),
    balancesList: jspb.Message.toObjectList(msg.getBalancesList(),
    proto.ffs.rpc.BalanceInfo.toObject, includeInstance),
    pinsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.InstanceInfo}
 */
proto.ffs.rpc.InstanceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.InstanceInfo;
  return proto.ffs.rpc.InstanceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.InstanceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.InstanceInfo}
 */
proto.ffs.rpc.InstanceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.ffs.rpc.StorageConfig;
      reader.readMessage(value,proto.ffs.rpc.StorageConfig.deserializeBinaryFromReader);
      msg.setDefaultStorageConfig(value);
      break;
    case 3:
      var value = new proto.ffs.rpc.BalanceInfo;
      reader.readMessage(value,proto.ffs.rpc.BalanceInfo.deserializeBinaryFromReader);
      msg.addBalances(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.InstanceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.InstanceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.InstanceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.InstanceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDefaultStorageConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ffs.rpc.StorageConfig.serializeBinaryToWriter
    );
  }
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ffs.rpc.BalanceInfo.serializeBinaryToWriter
    );
  }
  f = message.getPinsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ffs.rpc.InstanceInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.InstanceInfo} returns this
 */
proto.ffs.rpc.InstanceInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StorageConfig default_storage_config = 2;
 * @return {?proto.ffs.rpc.StorageConfig}
 */
proto.ffs.rpc.InstanceInfo.prototype.getDefaultStorageConfig = function() {
  return /** @type{?proto.ffs.rpc.StorageConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.StorageConfig, 2));
};


/**
 * @param {?proto.ffs.rpc.StorageConfig|undefined} value
 * @return {!proto.ffs.rpc.InstanceInfo} returns this
*/
proto.ffs.rpc.InstanceInfo.prototype.setDefaultStorageConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.InstanceInfo} returns this
 */
proto.ffs.rpc.InstanceInfo.prototype.clearDefaultStorageConfig = function() {
  return this.setDefaultStorageConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.InstanceInfo.prototype.hasDefaultStorageConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BalanceInfo balances = 3;
 * @return {!Array<!proto.ffs.rpc.BalanceInfo>}
 */
proto.ffs.rpc.InstanceInfo.prototype.getBalancesList = function() {
  return /** @type{!Array<!proto.ffs.rpc.BalanceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffs.rpc.BalanceInfo, 3));
};


/**
 * @param {!Array<!proto.ffs.rpc.BalanceInfo>} value
 * @return {!proto.ffs.rpc.InstanceInfo} returns this
*/
proto.ffs.rpc.InstanceInfo.prototype.setBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ffs.rpc.BalanceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.BalanceInfo}
 */
proto.ffs.rpc.InstanceInfo.prototype.addBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ffs.rpc.BalanceInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.InstanceInfo} returns this
 */
proto.ffs.rpc.InstanceInfo.prototype.clearBalancesList = function() {
  return this.setBalancesList([]);
};


/**
 * repeated string pins = 4;
 * @return {!Array<string>}
 */
proto.ffs.rpc.InstanceInfo.prototype.getPinsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffs.rpc.InstanceInfo} returns this
 */
proto.ffs.rpc.InstanceInfo.prototype.setPinsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.InstanceInfo} returns this
 */
proto.ffs.rpc.InstanceInfo.prototype.addPins = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.InstanceInfo} returns this
 */
proto.ffs.rpc.InstanceInfo.prototype.clearPinsList = function() {
  return this.setPinsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.Job.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.Job.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.Job.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.Job} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.Job.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apiId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    errCause: jspb.Message.getFieldWithDefault(msg, 5, ""),
    dealErrorsList: jspb.Message.toObjectList(msg.getDealErrorsList(),
    proto.ffs.rpc.DealError.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.Job}
 */
proto.ffs.rpc.Job.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.Job;
  return proto.ffs.rpc.Job.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.Job} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.Job}
 */
proto.ffs.rpc.Job.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 4:
      var value = /** @type {!proto.ffs.rpc.JobStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrCause(value);
      break;
    case 6:
      var value = new proto.ffs.rpc.DealError;
      reader.readMessage(value,proto.ffs.rpc.DealError.deserializeBinaryFromReader);
      msg.addDealErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.Job.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.Job.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.Job} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.Job.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApiId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getErrCause();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDealErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ffs.rpc.DealError.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ffs.rpc.Job.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.Job} returns this
 */
proto.ffs.rpc.Job.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string api_id = 2;
 * @return {string}
 */
proto.ffs.rpc.Job.prototype.getApiId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.Job} returns this
 */
proto.ffs.rpc.Job.prototype.setApiId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cid = 3;
 * @return {string}
 */
proto.ffs.rpc.Job.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.Job} returns this
 */
proto.ffs.rpc.Job.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional JobStatus status = 4;
 * @return {!proto.ffs.rpc.JobStatus}
 */
proto.ffs.rpc.Job.prototype.getStatus = function() {
  return /** @type {!proto.ffs.rpc.JobStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ffs.rpc.JobStatus} value
 * @return {!proto.ffs.rpc.Job} returns this
 */
proto.ffs.rpc.Job.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string err_cause = 5;
 * @return {string}
 */
proto.ffs.rpc.Job.prototype.getErrCause = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.Job} returns this
 */
proto.ffs.rpc.Job.prototype.setErrCause = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated DealError deal_errors = 6;
 * @return {!Array<!proto.ffs.rpc.DealError>}
 */
proto.ffs.rpc.Job.prototype.getDealErrorsList = function() {
  return /** @type{!Array<!proto.ffs.rpc.DealError>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffs.rpc.DealError, 6));
};


/**
 * @param {!Array<!proto.ffs.rpc.DealError>} value
 * @return {!proto.ffs.rpc.Job} returns this
*/
proto.ffs.rpc.Job.prototype.setDealErrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ffs.rpc.DealError=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.DealError}
 */
proto.ffs.rpc.Job.prototype.addDealErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ffs.rpc.DealError, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.Job} returns this
 */
proto.ffs.rpc.Job.prototype.clearDealErrorsList = function() {
  return this.setDealErrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.DealError.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.DealError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.DealError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.DealError.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalCid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    miner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.DealError}
 */
proto.ffs.rpc.DealError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.DealError;
  return proto.ffs.rpc.DealError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.DealError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.DealError}
 */
proto.ffs.rpc.DealError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposalCid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.DealError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.DealError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.DealError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.DealError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string proposal_cid = 1;
 * @return {string}
 */
proto.ffs.rpc.DealError.prototype.getProposalCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.DealError} returns this
 */
proto.ffs.rpc.DealError.prototype.setProposalCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string miner = 2;
 * @return {string}
 */
proto.ffs.rpc.DealError.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.DealError} returns this
 */
proto.ffs.rpc.DealError.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ffs.rpc.DealError.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.DealError} returns this
 */
proto.ffs.rpc.DealError.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.LogEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.LogEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.LogEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.LogEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.LogEntry}
 */
proto.ffs.rpc.LogEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.LogEntry;
  return proto.ffs.rpc.LogEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.LogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.LogEntry}
 */
proto.ffs.rpc.LogEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.LogEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.LogEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.LogEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.LogEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.ffs.rpc.LogEntry.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.LogEntry} returns this
 */
proto.ffs.rpc.LogEntry.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jid = 2;
 * @return {string}
 */
proto.ffs.rpc.LogEntry.prototype.getJid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.LogEntry} returns this
 */
proto.ffs.rpc.LogEntry.prototype.setJid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 time = 3;
 * @return {number}
 */
proto.ffs.rpc.LogEntry.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.LogEntry} returns this
 */
proto.ffs.rpc.LogEntry.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string msg = 4;
 * @return {string}
 */
proto.ffs.rpc.LogEntry.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.LogEntry} returns this
 */
proto.ffs.rpc.LogEntry.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.PaychInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.PaychInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.PaychInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.PaychInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ctlAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.PaychInfo}
 */
proto.ffs.rpc.PaychInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.PaychInfo;
  return proto.ffs.rpc.PaychInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.PaychInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.PaychInfo}
 */
proto.ffs.rpc.PaychInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtlAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 3:
      var value = /** @type {!proto.ffs.rpc.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.PaychInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.PaychInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.PaychInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.PaychInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCtlAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string ctl_addr = 1;
 * @return {string}
 */
proto.ffs.rpc.PaychInfo.prototype.getCtlAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.PaychInfo} returns this
 */
proto.ffs.rpc.PaychInfo.prototype.setCtlAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string addr = 2;
 * @return {string}
 */
proto.ffs.rpc.PaychInfo.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.PaychInfo} returns this
 */
proto.ffs.rpc.PaychInfo.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Direction direction = 3;
 * @return {!proto.ffs.rpc.Direction}
 */
proto.ffs.rpc.PaychInfo.prototype.getDirection = function() {
  return /** @type {!proto.ffs.rpc.Direction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ffs.rpc.Direction} value
 * @return {!proto.ffs.rpc.PaychInfo} returns this
 */
proto.ffs.rpc.PaychInfo.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.ListDealRecordsConfig.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListDealRecordsConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListDealRecordsConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListDealRecordsConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddrsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    dataCidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    includePending: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    includeFinal: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    ascending: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListDealRecordsConfig}
 */
proto.ffs.rpc.ListDealRecordsConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListDealRecordsConfig;
  return proto.ffs.rpc.ListDealRecordsConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListDealRecordsConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListDealRecordsConfig}
 */
proto.ffs.rpc.ListDealRecordsConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFromAddrs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDataCids(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludePending(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeFinal(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAscending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListDealRecordsConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListDealRecordsConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListDealRecordsConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDataCidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getIncludePending();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIncludeFinal();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAscending();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated string from_addrs = 1;
 * @return {!Array<string>}
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.getFromAddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.setFromAddrsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.addFromAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.clearFromAddrsList = function() {
  return this.setFromAddrsList([]);
};


/**
 * repeated string data_cids = 2;
 * @return {!Array<string>}
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.getDataCidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.setDataCidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.addDataCids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.clearDataCidsList = function() {
  return this.setDataCidsList([]);
};


/**
 * optional bool include_pending = 3;
 * @return {boolean}
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.getIncludePending = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.setIncludePending = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool include_final = 4;
 * @return {boolean}
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.getIncludeFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.setIncludeFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool ascending = 5;
 * @return {boolean}
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.getAscending = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.ListDealRecordsConfig} returns this
 */
proto.ffs.rpc.ListDealRecordsConfig.prototype.setAscending = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.StorageDealInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.StorageDealInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.StorageDealInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StorageDealInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposalCid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stateId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stateName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    miner: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pieceCid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    size: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pricePerEpoch: jspb.Message.getFieldWithDefault(msg, 7, 0),
    startEpoch: jspb.Message.getFieldWithDefault(msg, 8, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 9, 0),
    dealId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    activationEpoch: jspb.Message.getFieldWithDefault(msg, 11, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.StorageDealInfo}
 */
proto.ffs.rpc.StorageDealInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.StorageDealInfo;
  return proto.ffs.rpc.StorageDealInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.StorageDealInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.StorageDealInfo}
 */
proto.ffs.rpc.StorageDealInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposalCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStateId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPieceCid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPricePerEpoch(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartEpoch(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDuration(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDealId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActivationEpoch(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.StorageDealInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.StorageDealInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.StorageDealInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StorageDealInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposalCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStateId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStateName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPieceCid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getPricePerEpoch();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getStartEpoch();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getDealId();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getActivationEpoch();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string proposal_cid = 1;
 * @return {string}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getProposalCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setProposalCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 state_id = 2;
 * @return {number}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getStateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setStateId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string state_name = 3;
 * @return {string}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getStateName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setStateName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string miner = 4;
 * @return {string}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string piece_cid = 5;
 * @return {string}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getPieceCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setPieceCid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 size = 6;
 * @return {number}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 price_per_epoch = 7;
 * @return {number}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getPricePerEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setPricePerEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 start_epoch = 8;
 * @return {number}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getStartEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setStartEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 duration = 9;
 * @return {number}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 deal_id = 10;
 * @return {number}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getDealId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setDealId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 activation_epoch = 11;
 * @return {number}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getActivationEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setActivationEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string msg = 12;
 * @return {string}
 */
proto.ffs.rpc.StorageDealInfo.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.StorageDealInfo} returns this
 */
proto.ffs.rpc.StorageDealInfo.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.StorageDealRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.StorageDealRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.StorageDealRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StorageDealRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootCid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pending: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    dealInfo: (f = msg.getDealInfo()) && proto.ffs.rpc.StorageDealInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.StorageDealRecord}
 */
proto.ffs.rpc.StorageDealRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.StorageDealRecord;
  return proto.ffs.rpc.StorageDealRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.StorageDealRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.StorageDealRecord}
 */
proto.ffs.rpc.StorageDealRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootCid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPending(value);
      break;
    case 5:
      var value = new proto.ffs.rpc.StorageDealInfo;
      reader.readMessage(value,proto.ffs.rpc.StorageDealInfo.deserializeBinaryFromReader);
      msg.setDealInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.StorageDealRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.StorageDealRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.StorageDealRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StorageDealRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPending();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDealInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ffs.rpc.StorageDealInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string root_cid = 1;
 * @return {string}
 */
proto.ffs.rpc.StorageDealRecord.prototype.getRootCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.StorageDealRecord} returns this
 */
proto.ffs.rpc.StorageDealRecord.prototype.setRootCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string addr = 2;
 * @return {string}
 */
proto.ffs.rpc.StorageDealRecord.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.StorageDealRecord} returns this
 */
proto.ffs.rpc.StorageDealRecord.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 time = 3;
 * @return {number}
 */
proto.ffs.rpc.StorageDealRecord.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.StorageDealRecord} returns this
 */
proto.ffs.rpc.StorageDealRecord.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool pending = 4;
 * @return {boolean}
 */
proto.ffs.rpc.StorageDealRecord.prototype.getPending = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.StorageDealRecord} returns this
 */
proto.ffs.rpc.StorageDealRecord.prototype.setPending = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional StorageDealInfo deal_info = 5;
 * @return {?proto.ffs.rpc.StorageDealInfo}
 */
proto.ffs.rpc.StorageDealRecord.prototype.getDealInfo = function() {
  return /** @type{?proto.ffs.rpc.StorageDealInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.StorageDealInfo, 5));
};


/**
 * @param {?proto.ffs.rpc.StorageDealInfo|undefined} value
 * @return {!proto.ffs.rpc.StorageDealRecord} returns this
*/
proto.ffs.rpc.StorageDealRecord.prototype.setDealInfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.StorageDealRecord} returns this
 */
proto.ffs.rpc.StorageDealRecord.prototype.clearDealInfo = function() {
  return this.setDealInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.StorageDealRecord.prototype.hasDealInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.RetrievalDealInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.RetrievalDealInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RetrievalDealInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootCid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minPrice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    paymentInterval: jspb.Message.getFieldWithDefault(msg, 4, 0),
    paymentIntervalIncrease: jspb.Message.getFieldWithDefault(msg, 5, 0),
    miner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    minerPeerId: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.RetrievalDealInfo}
 */
proto.ffs.rpc.RetrievalDealInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.RetrievalDealInfo;
  return proto.ffs.rpc.RetrievalDealInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.RetrievalDealInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.RetrievalDealInfo}
 */
proto.ffs.rpc.RetrievalDealInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootCid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPaymentInterval(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPaymentIntervalIncrease(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinerPeerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.RetrievalDealInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.RetrievalDealInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RetrievalDealInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMinPrice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPaymentInterval();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPaymentIntervalIncrease();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMinerPeerId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string root_cid = 1;
 * @return {string}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.getRootCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.RetrievalDealInfo} returns this
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.setRootCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 size = 2;
 * @return {number}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.RetrievalDealInfo} returns this
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 min_price = 3;
 * @return {number}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.getMinPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.RetrievalDealInfo} returns this
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.setMinPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 payment_interval = 4;
 * @return {number}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.getPaymentInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.RetrievalDealInfo} returns this
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.setPaymentInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 payment_interval_increase = 5;
 * @return {number}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.getPaymentIntervalIncrease = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.RetrievalDealInfo} returns this
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.setPaymentIntervalIncrease = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string miner = 6;
 * @return {string}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.RetrievalDealInfo} returns this
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string miner_peer_id = 7;
 * @return {string}
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.getMinerPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.RetrievalDealInfo} returns this
 */
proto.ffs.rpc.RetrievalDealInfo.prototype.setMinerPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.RetrievalDealRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.RetrievalDealRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RetrievalDealRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dealInfo: (f = msg.getDealInfo()) && proto.ffs.rpc.RetrievalDealInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.RetrievalDealRecord}
 */
proto.ffs.rpc.RetrievalDealRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.RetrievalDealRecord;
  return proto.ffs.rpc.RetrievalDealRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.RetrievalDealRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.RetrievalDealRecord}
 */
proto.ffs.rpc.RetrievalDealRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 3:
      var value = new proto.ffs.rpc.RetrievalDealInfo;
      reader.readMessage(value,proto.ffs.rpc.RetrievalDealInfo.deserializeBinaryFromReader);
      msg.setDealInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.RetrievalDealRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.RetrievalDealRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RetrievalDealRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDealInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ffs.rpc.RetrievalDealInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.RetrievalDealRecord} returns this
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.RetrievalDealRecord} returns this
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional RetrievalDealInfo deal_info = 3;
 * @return {?proto.ffs.rpc.RetrievalDealInfo}
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.getDealInfo = function() {
  return /** @type{?proto.ffs.rpc.RetrievalDealInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.RetrievalDealInfo, 3));
};


/**
 * @param {?proto.ffs.rpc.RetrievalDealInfo|undefined} value
 * @return {!proto.ffs.rpc.RetrievalDealRecord} returns this
*/
proto.ffs.rpc.RetrievalDealRecord.prototype.setDealInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.RetrievalDealRecord} returns this
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.clearDealInfo = function() {
  return this.setDealInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.RetrievalDealRecord.prototype.hasDealInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.CreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.CreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.CreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.CreateRequest}
 */
proto.ffs.rpc.CreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.CreateRequest;
  return proto.ffs.rpc.CreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.CreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.CreateRequest}
 */
proto.ffs.rpc.CreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.CreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.CreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.CreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.CreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.CreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.CreateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.CreateResponse}
 */
proto.ffs.rpc.CreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.CreateResponse;
  return proto.ffs.rpc.CreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.CreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.CreateResponse}
 */
proto.ffs.rpc.CreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.CreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.CreateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.CreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CreateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ffs.rpc.CreateResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.CreateResponse} returns this
 */
proto.ffs.rpc.CreateResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.ffs.rpc.CreateResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.CreateResponse} returns this
 */
proto.ffs.rpc.CreateResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListAPIRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListAPIRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListAPIRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListAPIRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListAPIRequest}
 */
proto.ffs.rpc.ListAPIRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListAPIRequest;
  return proto.ffs.rpc.ListAPIRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListAPIRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListAPIRequest}
 */
proto.ffs.rpc.ListAPIRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListAPIRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListAPIRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListAPIRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListAPIRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.ListAPIResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListAPIResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListAPIResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListAPIResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListAPIResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    instancesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListAPIResponse}
 */
proto.ffs.rpc.ListAPIResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListAPIResponse;
  return proto.ffs.rpc.ListAPIResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListAPIResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListAPIResponse}
 */
proto.ffs.rpc.ListAPIResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListAPIResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListAPIResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListAPIResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListAPIResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstancesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string instances = 1;
 * @return {!Array<string>}
 */
proto.ffs.rpc.ListAPIResponse.prototype.getInstancesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffs.rpc.ListAPIResponse} returns this
 */
proto.ffs.rpc.ListAPIResponse.prototype.setInstancesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.ListAPIResponse} returns this
 */
proto.ffs.rpc.ListAPIResponse.prototype.addInstances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.ListAPIResponse} returns this
 */
proto.ffs.rpc.ListAPIResponse.prototype.clearInstancesList = function() {
  return this.setInstancesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.IDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.IDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.IDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.IDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.IDRequest}
 */
proto.ffs.rpc.IDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.IDRequest;
  return proto.ffs.rpc.IDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.IDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.IDRequest}
 */
proto.ffs.rpc.IDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.IDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.IDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.IDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.IDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.IDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.IDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.IDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.IDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.IDResponse}
 */
proto.ffs.rpc.IDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.IDResponse;
  return proto.ffs.rpc.IDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.IDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.IDResponse}
 */
proto.ffs.rpc.IDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.IDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.IDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.IDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.IDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ffs.rpc.IDResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.IDResponse} returns this
 */
proto.ffs.rpc.IDResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.AddrsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.AddrsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.AddrsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.AddrsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.AddrsRequest}
 */
proto.ffs.rpc.AddrsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.AddrsRequest;
  return proto.ffs.rpc.AddrsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.AddrsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.AddrsRequest}
 */
proto.ffs.rpc.AddrsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.AddrsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.AddrsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.AddrsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.AddrsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.AddrsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.AddrsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.AddrsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.AddrsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.AddrsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrsList: jspb.Message.toObjectList(msg.getAddrsList(),
    proto.ffs.rpc.AddrInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.AddrsResponse}
 */
proto.ffs.rpc.AddrsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.AddrsResponse;
  return proto.ffs.rpc.AddrsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.AddrsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.AddrsResponse}
 */
proto.ffs.rpc.AddrsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.AddrInfo;
      reader.readMessage(value,proto.ffs.rpc.AddrInfo.deserializeBinaryFromReader);
      msg.addAddrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.AddrsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.AddrsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.AddrsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.AddrsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffs.rpc.AddrInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AddrInfo addrs = 1;
 * @return {!Array<!proto.ffs.rpc.AddrInfo>}
 */
proto.ffs.rpc.AddrsResponse.prototype.getAddrsList = function() {
  return /** @type{!Array<!proto.ffs.rpc.AddrInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffs.rpc.AddrInfo, 1));
};


/**
 * @param {!Array<!proto.ffs.rpc.AddrInfo>} value
 * @return {!proto.ffs.rpc.AddrsResponse} returns this
*/
proto.ffs.rpc.AddrsResponse.prototype.setAddrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffs.rpc.AddrInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.AddrInfo}
 */
proto.ffs.rpc.AddrsResponse.prototype.addAddrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffs.rpc.AddrInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.AddrsResponse} returns this
 */
proto.ffs.rpc.AddrsResponse.prototype.clearAddrsList = function() {
  return this.setAddrsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.DefaultStorageConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.DefaultStorageConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.DefaultStorageConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.DefaultStorageConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.DefaultStorageConfigRequest}
 */
proto.ffs.rpc.DefaultStorageConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.DefaultStorageConfigRequest;
  return proto.ffs.rpc.DefaultStorageConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.DefaultStorageConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.DefaultStorageConfigRequest}
 */
proto.ffs.rpc.DefaultStorageConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.DefaultStorageConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.DefaultStorageConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.DefaultStorageConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.DefaultStorageConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.DefaultStorageConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.DefaultStorageConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.DefaultStorageConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.DefaultStorageConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultStorageConfig: (f = msg.getDefaultStorageConfig()) && proto.ffs.rpc.StorageConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.DefaultStorageConfigResponse}
 */
proto.ffs.rpc.DefaultStorageConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.DefaultStorageConfigResponse;
  return proto.ffs.rpc.DefaultStorageConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.DefaultStorageConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.DefaultStorageConfigResponse}
 */
proto.ffs.rpc.DefaultStorageConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.StorageConfig;
      reader.readMessage(value,proto.ffs.rpc.StorageConfig.deserializeBinaryFromReader);
      msg.setDefaultStorageConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.DefaultStorageConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.DefaultStorageConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.DefaultStorageConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.DefaultStorageConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultStorageConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.StorageConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional StorageConfig default_storage_config = 1;
 * @return {?proto.ffs.rpc.StorageConfig}
 */
proto.ffs.rpc.DefaultStorageConfigResponse.prototype.getDefaultStorageConfig = function() {
  return /** @type{?proto.ffs.rpc.StorageConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.StorageConfig, 1));
};


/**
 * @param {?proto.ffs.rpc.StorageConfig|undefined} value
 * @return {!proto.ffs.rpc.DefaultStorageConfigResponse} returns this
*/
proto.ffs.rpc.DefaultStorageConfigResponse.prototype.setDefaultStorageConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.DefaultStorageConfigResponse} returns this
 */
proto.ffs.rpc.DefaultStorageConfigResponse.prototype.clearDefaultStorageConfig = function() {
  return this.setDefaultStorageConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.DefaultStorageConfigResponse.prototype.hasDefaultStorageConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.NewAddrRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.NewAddrRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.NewAddrRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.NewAddrRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addressType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    makeDefault: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.NewAddrRequest}
 */
proto.ffs.rpc.NewAddrRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.NewAddrRequest;
  return proto.ffs.rpc.NewAddrRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.NewAddrRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.NewAddrRequest}
 */
proto.ffs.rpc.NewAddrRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddressType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMakeDefault(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.NewAddrRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.NewAddrRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.NewAddrRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.NewAddrRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddressType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMakeDefault();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ffs.rpc.NewAddrRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.NewAddrRequest} returns this
 */
proto.ffs.rpc.NewAddrRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address_type = 2;
 * @return {string}
 */
proto.ffs.rpc.NewAddrRequest.prototype.getAddressType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.NewAddrRequest} returns this
 */
proto.ffs.rpc.NewAddrRequest.prototype.setAddressType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool make_default = 3;
 * @return {boolean}
 */
proto.ffs.rpc.NewAddrRequest.prototype.getMakeDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.NewAddrRequest} returns this
 */
proto.ffs.rpc.NewAddrRequest.prototype.setMakeDefault = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.NewAddrResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.NewAddrResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.NewAddrResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.NewAddrResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.NewAddrResponse}
 */
proto.ffs.rpc.NewAddrResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.NewAddrResponse;
  return proto.ffs.rpc.NewAddrResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.NewAddrResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.NewAddrResponse}
 */
proto.ffs.rpc.NewAddrResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.NewAddrResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.NewAddrResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.NewAddrResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.NewAddrResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.ffs.rpc.NewAddrResponse.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.NewAddrResponse} returns this
 */
proto.ffs.rpc.NewAddrResponse.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.GetStorageConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.GetStorageConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.GetStorageConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetStorageConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.GetStorageConfigRequest}
 */
proto.ffs.rpc.GetStorageConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.GetStorageConfigRequest;
  return proto.ffs.rpc.GetStorageConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.GetStorageConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.GetStorageConfigRequest}
 */
proto.ffs.rpc.GetStorageConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.GetStorageConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.GetStorageConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.GetStorageConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetStorageConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.ffs.rpc.GetStorageConfigRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.GetStorageConfigRequest} returns this
 */
proto.ffs.rpc.GetStorageConfigRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.GetStorageConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.GetStorageConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.GetStorageConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetStorageConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.ffs.rpc.StorageConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.GetStorageConfigResponse}
 */
proto.ffs.rpc.GetStorageConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.GetStorageConfigResponse;
  return proto.ffs.rpc.GetStorageConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.GetStorageConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.GetStorageConfigResponse}
 */
proto.ffs.rpc.GetStorageConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.StorageConfig;
      reader.readMessage(value,proto.ffs.rpc.StorageConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.GetStorageConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.GetStorageConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.GetStorageConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetStorageConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.StorageConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional StorageConfig config = 1;
 * @return {?proto.ffs.rpc.StorageConfig}
 */
proto.ffs.rpc.GetStorageConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.ffs.rpc.StorageConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.StorageConfig, 1));
};


/**
 * @param {?proto.ffs.rpc.StorageConfig|undefined} value
 * @return {!proto.ffs.rpc.GetStorageConfigResponse} returns this
*/
proto.ffs.rpc.GetStorageConfigResponse.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.GetStorageConfigResponse} returns this
 */
proto.ffs.rpc.GetStorageConfigResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.GetStorageConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.SetDefaultStorageConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.SetDefaultStorageConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.ffs.rpc.StorageConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.SetDefaultStorageConfigRequest}
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.SetDefaultStorageConfigRequest;
  return proto.ffs.rpc.SetDefaultStorageConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.SetDefaultStorageConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.SetDefaultStorageConfigRequest}
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.StorageConfig;
      reader.readMessage(value,proto.ffs.rpc.StorageConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.SetDefaultStorageConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.SetDefaultStorageConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.StorageConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional StorageConfig config = 1;
 * @return {?proto.ffs.rpc.StorageConfig}
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.ffs.rpc.StorageConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.StorageConfig, 1));
};


/**
 * @param {?proto.ffs.rpc.StorageConfig|undefined} value
 * @return {!proto.ffs.rpc.SetDefaultStorageConfigRequest} returns this
*/
proto.ffs.rpc.SetDefaultStorageConfigRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.SetDefaultStorageConfigRequest} returns this
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.SetDefaultStorageConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.SetDefaultStorageConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.SetDefaultStorageConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.SetDefaultStorageConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.SetDefaultStorageConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.SetDefaultStorageConfigResponse}
 */
proto.ffs.rpc.SetDefaultStorageConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.SetDefaultStorageConfigResponse;
  return proto.ffs.rpc.SetDefaultStorageConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.SetDefaultStorageConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.SetDefaultStorageConfigResponse}
 */
proto.ffs.rpc.SetDefaultStorageConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.SetDefaultStorageConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.SetDefaultStorageConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.SetDefaultStorageConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.SetDefaultStorageConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ShowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ShowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ShowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ShowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ShowRequest}
 */
proto.ffs.rpc.ShowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ShowRequest;
  return proto.ffs.rpc.ShowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ShowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ShowRequest}
 */
proto.ffs.rpc.ShowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ShowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ShowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ShowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ShowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.ffs.rpc.ShowRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.ShowRequest} returns this
 */
proto.ffs.rpc.ShowRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ShowResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ShowResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ShowResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ShowResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cidInfo: (f = msg.getCidInfo()) && proto.ffs.rpc.CidInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ShowResponse}
 */
proto.ffs.rpc.ShowResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ShowResponse;
  return proto.ffs.rpc.ShowResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ShowResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ShowResponse}
 */
proto.ffs.rpc.ShowResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.CidInfo;
      reader.readMessage(value,proto.ffs.rpc.CidInfo.deserializeBinaryFromReader);
      msg.setCidInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ShowResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ShowResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ShowResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ShowResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCidInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.CidInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional CidInfo cid_info = 1;
 * @return {?proto.ffs.rpc.CidInfo}
 */
proto.ffs.rpc.ShowResponse.prototype.getCidInfo = function() {
  return /** @type{?proto.ffs.rpc.CidInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.CidInfo, 1));
};


/**
 * @param {?proto.ffs.rpc.CidInfo|undefined} value
 * @return {!proto.ffs.rpc.ShowResponse} returns this
*/
proto.ffs.rpc.ShowResponse.prototype.setCidInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.ShowResponse} returns this
 */
proto.ffs.rpc.ShowResponse.prototype.clearCidInfo = function() {
  return this.setCidInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.ShowResponse.prototype.hasCidInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.InfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.InfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.InfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.InfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.InfoRequest}
 */
proto.ffs.rpc.InfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.InfoRequest;
  return proto.ffs.rpc.InfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.InfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.InfoRequest}
 */
proto.ffs.rpc.InfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.InfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.InfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.InfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.InfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.InfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.InfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.InfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.InfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.ffs.rpc.InstanceInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.InfoResponse}
 */
proto.ffs.rpc.InfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.InfoResponse;
  return proto.ffs.rpc.InfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.InfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.InfoResponse}
 */
proto.ffs.rpc.InfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.InstanceInfo;
      reader.readMessage(value,proto.ffs.rpc.InstanceInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.InfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.InfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.InfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.InfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.InstanceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional InstanceInfo info = 1;
 * @return {?proto.ffs.rpc.InstanceInfo}
 */
proto.ffs.rpc.InfoResponse.prototype.getInfo = function() {
  return /** @type{?proto.ffs.rpc.InstanceInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.InstanceInfo, 1));
};


/**
 * @param {?proto.ffs.rpc.InstanceInfo|undefined} value
 * @return {!proto.ffs.rpc.InfoResponse} returns this
*/
proto.ffs.rpc.InfoResponse.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.InfoResponse} returns this
 */
proto.ffs.rpc.InfoResponse.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.InfoResponse.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.CancelJobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.CancelJobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.CancelJobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CancelJobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.CancelJobRequest}
 */
proto.ffs.rpc.CancelJobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.CancelJobRequest;
  return proto.ffs.rpc.CancelJobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.CancelJobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.CancelJobRequest}
 */
proto.ffs.rpc.CancelJobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.CancelJobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.CancelJobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.CancelJobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CancelJobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string jid = 1;
 * @return {string}
 */
proto.ffs.rpc.CancelJobRequest.prototype.getJid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.CancelJobRequest} returns this
 */
proto.ffs.rpc.CancelJobRequest.prototype.setJid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.CancelJobResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.CancelJobResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.CancelJobResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CancelJobResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.CancelJobResponse}
 */
proto.ffs.rpc.CancelJobResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.CancelJobResponse;
  return proto.ffs.rpc.CancelJobResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.CancelJobResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.CancelJobResponse}
 */
proto.ffs.rpc.CancelJobResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.CancelJobResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.CancelJobResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.CancelJobResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CancelJobResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.GetStorageJobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.GetStorageJobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.GetStorageJobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetStorageJobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.GetStorageJobRequest}
 */
proto.ffs.rpc.GetStorageJobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.GetStorageJobRequest;
  return proto.ffs.rpc.GetStorageJobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.GetStorageJobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.GetStorageJobRequest}
 */
proto.ffs.rpc.GetStorageJobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.GetStorageJobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.GetStorageJobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.GetStorageJobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetStorageJobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string jid = 1;
 * @return {string}
 */
proto.ffs.rpc.GetStorageJobRequest.prototype.getJid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.GetStorageJobRequest} returns this
 */
proto.ffs.rpc.GetStorageJobRequest.prototype.setJid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.GetStorageJobResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.GetStorageJobResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.GetStorageJobResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetStorageJobResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    job: (f = msg.getJob()) && proto.ffs.rpc.Job.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.GetStorageJobResponse}
 */
proto.ffs.rpc.GetStorageJobResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.GetStorageJobResponse;
  return proto.ffs.rpc.GetStorageJobResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.GetStorageJobResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.GetStorageJobResponse}
 */
proto.ffs.rpc.GetStorageJobResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.Job;
      reader.readMessage(value,proto.ffs.rpc.Job.deserializeBinaryFromReader);
      msg.setJob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.GetStorageJobResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.GetStorageJobResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.GetStorageJobResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetStorageJobResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJob();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.Job.serializeBinaryToWriter
    );
  }
};


/**
 * optional Job job = 1;
 * @return {?proto.ffs.rpc.Job}
 */
proto.ffs.rpc.GetStorageJobResponse.prototype.getJob = function() {
  return /** @type{?proto.ffs.rpc.Job} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.Job, 1));
};


/**
 * @param {?proto.ffs.rpc.Job|undefined} value
 * @return {!proto.ffs.rpc.GetStorageJobResponse} returns this
*/
proto.ffs.rpc.GetStorageJobResponse.prototype.setJob = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.GetStorageJobResponse} returns this
 */
proto.ffs.rpc.GetStorageJobResponse.prototype.clearJob = function() {
  return this.setJob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.GetStorageJobResponse.prototype.hasJob = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.WatchJobsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.WatchJobsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.WatchJobsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.WatchJobsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.WatchJobsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.WatchJobsRequest}
 */
proto.ffs.rpc.WatchJobsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.WatchJobsRequest;
  return proto.ffs.rpc.WatchJobsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.WatchJobsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.WatchJobsRequest}
 */
proto.ffs.rpc.WatchJobsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addJids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.WatchJobsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.WatchJobsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.WatchJobsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.WatchJobsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string jids = 1;
 * @return {!Array<string>}
 */
proto.ffs.rpc.WatchJobsRequest.prototype.getJidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ffs.rpc.WatchJobsRequest} returns this
 */
proto.ffs.rpc.WatchJobsRequest.prototype.setJidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.WatchJobsRequest} returns this
 */
proto.ffs.rpc.WatchJobsRequest.prototype.addJids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.WatchJobsRequest} returns this
 */
proto.ffs.rpc.WatchJobsRequest.prototype.clearJidsList = function() {
  return this.setJidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.WatchJobsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.WatchJobsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.WatchJobsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.WatchJobsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    job: (f = msg.getJob()) && proto.ffs.rpc.Job.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.WatchJobsResponse}
 */
proto.ffs.rpc.WatchJobsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.WatchJobsResponse;
  return proto.ffs.rpc.WatchJobsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.WatchJobsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.WatchJobsResponse}
 */
proto.ffs.rpc.WatchJobsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.Job;
      reader.readMessage(value,proto.ffs.rpc.Job.deserializeBinaryFromReader);
      msg.setJob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.WatchJobsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.WatchJobsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.WatchJobsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.WatchJobsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJob();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.Job.serializeBinaryToWriter
    );
  }
};


/**
 * optional Job job = 1;
 * @return {?proto.ffs.rpc.Job}
 */
proto.ffs.rpc.WatchJobsResponse.prototype.getJob = function() {
  return /** @type{?proto.ffs.rpc.Job} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.Job, 1));
};


/**
 * @param {?proto.ffs.rpc.Job|undefined} value
 * @return {!proto.ffs.rpc.WatchJobsResponse} returns this
*/
proto.ffs.rpc.WatchJobsResponse.prototype.setJob = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.WatchJobsResponse} returns this
 */
proto.ffs.rpc.WatchJobsResponse.prototype.clearJob = function() {
  return this.setJob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.WatchJobsResponse.prototype.hasJob = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.WatchLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.WatchLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.WatchLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.WatchLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    history: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.WatchLogsRequest}
 */
proto.ffs.rpc.WatchLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.WatchLogsRequest;
  return proto.ffs.rpc.WatchLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.WatchLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.WatchLogsRequest}
 */
proto.ffs.rpc.WatchLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.WatchLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.WatchLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.WatchLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.WatchLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHistory();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.ffs.rpc.WatchLogsRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.WatchLogsRequest} returns this
 */
proto.ffs.rpc.WatchLogsRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jid = 2;
 * @return {string}
 */
proto.ffs.rpc.WatchLogsRequest.prototype.getJid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.WatchLogsRequest} returns this
 */
proto.ffs.rpc.WatchLogsRequest.prototype.setJid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool history = 3;
 * @return {boolean}
 */
proto.ffs.rpc.WatchLogsRequest.prototype.getHistory = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.WatchLogsRequest} returns this
 */
proto.ffs.rpc.WatchLogsRequest.prototype.setHistory = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.WatchLogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.WatchLogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.WatchLogsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.WatchLogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    logEntry: (f = msg.getLogEntry()) && proto.ffs.rpc.LogEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.WatchLogsResponse}
 */
proto.ffs.rpc.WatchLogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.WatchLogsResponse;
  return proto.ffs.rpc.WatchLogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.WatchLogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.WatchLogsResponse}
 */
proto.ffs.rpc.WatchLogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.LogEntry;
      reader.readMessage(value,proto.ffs.rpc.LogEntry.deserializeBinaryFromReader);
      msg.setLogEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.WatchLogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.WatchLogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.WatchLogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.WatchLogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogEntry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.LogEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional LogEntry log_entry = 1;
 * @return {?proto.ffs.rpc.LogEntry}
 */
proto.ffs.rpc.WatchLogsResponse.prototype.getLogEntry = function() {
  return /** @type{?proto.ffs.rpc.LogEntry} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.LogEntry, 1));
};


/**
 * @param {?proto.ffs.rpc.LogEntry|undefined} value
 * @return {!proto.ffs.rpc.WatchLogsResponse} returns this
*/
proto.ffs.rpc.WatchLogsResponse.prototype.setLogEntry = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.WatchLogsResponse} returns this
 */
proto.ffs.rpc.WatchLogsResponse.prototype.clearLogEntry = function() {
  return this.setLogEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.WatchLogsResponse.prototype.hasLogEntry = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ReplaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ReplaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ReplaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ReplaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cid2: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ReplaceRequest}
 */
proto.ffs.rpc.ReplaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ReplaceRequest;
  return proto.ffs.rpc.ReplaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ReplaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ReplaceRequest}
 */
proto.ffs.rpc.ReplaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ReplaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ReplaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ReplaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ReplaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCid2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string cid1 = 1;
 * @return {string}
 */
proto.ffs.rpc.ReplaceRequest.prototype.getCid1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.ReplaceRequest} returns this
 */
proto.ffs.rpc.ReplaceRequest.prototype.setCid1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cid2 = 2;
 * @return {string}
 */
proto.ffs.rpc.ReplaceRequest.prototype.getCid2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.ReplaceRequest} returns this
 */
proto.ffs.rpc.ReplaceRequest.prototype.setCid2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ReplaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ReplaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ReplaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ReplaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ReplaceResponse}
 */
proto.ffs.rpc.ReplaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ReplaceResponse;
  return proto.ffs.rpc.ReplaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ReplaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ReplaceResponse}
 */
proto.ffs.rpc.ReplaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ReplaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ReplaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ReplaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ReplaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string job_id = 1;
 * @return {string}
 */
proto.ffs.rpc.ReplaceResponse.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.ReplaceResponse} returns this
 */
proto.ffs.rpc.ReplaceResponse.prototype.setJobId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.PushStorageConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.PushStorageConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.PushStorageConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    config: (f = msg.getConfig()) && proto.ffs.rpc.StorageConfig.toObject(includeInstance, f),
    hasConfig: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    overrideConfig: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    hasOverrideConfig: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.PushStorageConfigRequest}
 */
proto.ffs.rpc.PushStorageConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.PushStorageConfigRequest;
  return proto.ffs.rpc.PushStorageConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.PushStorageConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.PushStorageConfigRequest}
 */
proto.ffs.rpc.PushStorageConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    case 2:
      var value = new proto.ffs.rpc.StorageConfig;
      reader.readMessage(value,proto.ffs.rpc.StorageConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasConfig(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverrideConfig(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasOverrideConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.PushStorageConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.PushStorageConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.PushStorageConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ffs.rpc.StorageConfig.serializeBinaryToWriter
    );
  }
  f = message.getHasConfig();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOverrideConfig();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHasOverrideConfig();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.PushStorageConfigRequest} returns this
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StorageConfig config = 2;
 * @return {?proto.ffs.rpc.StorageConfig}
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.ffs.rpc.StorageConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.StorageConfig, 2));
};


/**
 * @param {?proto.ffs.rpc.StorageConfig|undefined} value
 * @return {!proto.ffs.rpc.PushStorageConfigRequest} returns this
*/
proto.ffs.rpc.PushStorageConfigRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.PushStorageConfigRequest} returns this
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool has_config = 3;
 * @return {boolean}
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.getHasConfig = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.PushStorageConfigRequest} returns this
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.setHasConfig = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool override_config = 4;
 * @return {boolean}
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.getOverrideConfig = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.PushStorageConfigRequest} returns this
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.setOverrideConfig = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool has_override_config = 5;
 * @return {boolean}
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.getHasOverrideConfig = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ffs.rpc.PushStorageConfigRequest} returns this
 */
proto.ffs.rpc.PushStorageConfigRequest.prototype.setHasOverrideConfig = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.PushStorageConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.PushStorageConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.PushStorageConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.PushStorageConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.PushStorageConfigResponse}
 */
proto.ffs.rpc.PushStorageConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.PushStorageConfigResponse;
  return proto.ffs.rpc.PushStorageConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.PushStorageConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.PushStorageConfigResponse}
 */
proto.ffs.rpc.PushStorageConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.PushStorageConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.PushStorageConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.PushStorageConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.PushStorageConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string job_id = 1;
 * @return {string}
 */
proto.ffs.rpc.PushStorageConfigResponse.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.PushStorageConfigResponse} returns this
 */
proto.ffs.rpc.PushStorageConfigResponse.prototype.setJobId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.RemoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.RemoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.RemoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RemoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.RemoveRequest}
 */
proto.ffs.rpc.RemoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.RemoveRequest;
  return proto.ffs.rpc.RemoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.RemoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.RemoveRequest}
 */
proto.ffs.rpc.RemoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.RemoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.RemoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.RemoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RemoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.ffs.rpc.RemoveRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.RemoveRequest} returns this
 */
proto.ffs.rpc.RemoveRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.RemoveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.RemoveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.RemoveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RemoveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.RemoveResponse}
 */
proto.ffs.rpc.RemoveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.RemoveResponse;
  return proto.ffs.rpc.RemoveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.RemoveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.RemoveResponse}
 */
proto.ffs.rpc.RemoveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.RemoveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.RemoveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.RemoveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RemoveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.GetRequest}
 */
proto.ffs.rpc.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.GetRequest;
  return proto.ffs.rpc.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.GetRequest}
 */
proto.ffs.rpc.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.ffs.rpc.GetRequest.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.GetRequest} returns this
 */
proto.ffs.rpc.GetRequest.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.GetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.GetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.GetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.GetResponse}
 */
proto.ffs.rpc.GetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.GetResponse;
  return proto.ffs.rpc.GetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.GetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.GetResponse}
 */
proto.ffs.rpc.GetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.GetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.GetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.GetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.GetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes chunk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ffs.rpc.GetResponse.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chunk = 1;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.ffs.rpc.GetResponse.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.ffs.rpc.GetResponse.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffs.rpc.GetResponse} returns this
 */
proto.ffs.rpc.GetResponse.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.SendFilRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.SendFilRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.SendFilRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.SendFilRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.SendFilRequest}
 */
proto.ffs.rpc.SendFilRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.SendFilRequest;
  return proto.ffs.rpc.SendFilRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.SendFilRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.SendFilRequest}
 */
proto.ffs.rpc.SendFilRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.SendFilRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.SendFilRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.SendFilRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.SendFilRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.ffs.rpc.SendFilRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.SendFilRequest} returns this
 */
proto.ffs.rpc.SendFilRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.ffs.rpc.SendFilRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.SendFilRequest} returns this
 */
proto.ffs.rpc.SendFilRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.ffs.rpc.SendFilRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.SendFilRequest} returns this
 */
proto.ffs.rpc.SendFilRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.SendFilResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.SendFilResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.SendFilResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.SendFilResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.SendFilResponse}
 */
proto.ffs.rpc.SendFilResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.SendFilResponse;
  return proto.ffs.rpc.SendFilResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.SendFilResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.SendFilResponse}
 */
proto.ffs.rpc.SendFilResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.SendFilResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.SendFilResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.SendFilResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.SendFilResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.StageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.StageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.StageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.StageRequest}
 */
proto.ffs.rpc.StageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.StageRequest;
  return proto.ffs.rpc.StageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.StageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.StageRequest}
 */
proto.ffs.rpc.StageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.StageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.StageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.StageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes chunk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ffs.rpc.StageRequest.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chunk = 1;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.ffs.rpc.StageRequest.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.ffs.rpc.StageRequest.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ffs.rpc.StageRequest} returns this
 */
proto.ffs.rpc.StageRequest.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.StageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.StageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.StageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.StageResponse}
 */
proto.ffs.rpc.StageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.StageResponse;
  return proto.ffs.rpc.StageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.StageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.StageResponse}
 */
proto.ffs.rpc.StageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.StageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.StageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.StageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.StageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cid = 1;
 * @return {string}
 */
proto.ffs.rpc.StageResponse.prototype.getCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.StageResponse} returns this
 */
proto.ffs.rpc.StageResponse.prototype.setCid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListPayChannelsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListPayChannelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListPayChannelsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListPayChannelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListPayChannelsRequest}
 */
proto.ffs.rpc.ListPayChannelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListPayChannelsRequest;
  return proto.ffs.rpc.ListPayChannelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListPayChannelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListPayChannelsRequest}
 */
proto.ffs.rpc.ListPayChannelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListPayChannelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListPayChannelsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListPayChannelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListPayChannelsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.ListPayChannelsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListPayChannelsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListPayChannelsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListPayChannelsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListPayChannelsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payChannelsList: jspb.Message.toObjectList(msg.getPayChannelsList(),
    proto.ffs.rpc.PaychInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListPayChannelsResponse}
 */
proto.ffs.rpc.ListPayChannelsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListPayChannelsResponse;
  return proto.ffs.rpc.ListPayChannelsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListPayChannelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListPayChannelsResponse}
 */
proto.ffs.rpc.ListPayChannelsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.PaychInfo;
      reader.readMessage(value,proto.ffs.rpc.PaychInfo.deserializeBinaryFromReader);
      msg.addPayChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListPayChannelsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListPayChannelsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListPayChannelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListPayChannelsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffs.rpc.PaychInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PaychInfo pay_channels = 1;
 * @return {!Array<!proto.ffs.rpc.PaychInfo>}
 */
proto.ffs.rpc.ListPayChannelsResponse.prototype.getPayChannelsList = function() {
  return /** @type{!Array<!proto.ffs.rpc.PaychInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffs.rpc.PaychInfo, 1));
};


/**
 * @param {!Array<!proto.ffs.rpc.PaychInfo>} value
 * @return {!proto.ffs.rpc.ListPayChannelsResponse} returns this
*/
proto.ffs.rpc.ListPayChannelsResponse.prototype.setPayChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffs.rpc.PaychInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.PaychInfo}
 */
proto.ffs.rpc.ListPayChannelsResponse.prototype.addPayChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffs.rpc.PaychInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.ListPayChannelsResponse} returns this
 */
proto.ffs.rpc.ListPayChannelsResponse.prototype.clearPayChannelsList = function() {
  return this.setPayChannelsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.CreatePayChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.CreatePayChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.CreatePayChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CreatePayChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.CreatePayChannelRequest}
 */
proto.ffs.rpc.CreatePayChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.CreatePayChannelRequest;
  return proto.ffs.rpc.CreatePayChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.CreatePayChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.CreatePayChannelRequest}
 */
proto.ffs.rpc.CreatePayChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.CreatePayChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.CreatePayChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.CreatePayChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CreatePayChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.ffs.rpc.CreatePayChannelRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.CreatePayChannelRequest} returns this
 */
proto.ffs.rpc.CreatePayChannelRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.ffs.rpc.CreatePayChannelRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.CreatePayChannelRequest} returns this
 */
proto.ffs.rpc.CreatePayChannelRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.ffs.rpc.CreatePayChannelRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ffs.rpc.CreatePayChannelRequest} returns this
 */
proto.ffs.rpc.CreatePayChannelRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.CreatePayChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.CreatePayChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.CreatePayChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CreatePayChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payChannel: (f = msg.getPayChannel()) && proto.ffs.rpc.PaychInfo.toObject(includeInstance, f),
    channelMessageCid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.CreatePayChannelResponse}
 */
proto.ffs.rpc.CreatePayChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.CreatePayChannelResponse;
  return proto.ffs.rpc.CreatePayChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.CreatePayChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.CreatePayChannelResponse}
 */
proto.ffs.rpc.CreatePayChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.PaychInfo;
      reader.readMessage(value,proto.ffs.rpc.PaychInfo.deserializeBinaryFromReader);
      msg.setPayChannel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelMessageCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.CreatePayChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.CreatePayChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.CreatePayChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.CreatePayChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayChannel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.PaychInfo.serializeBinaryToWriter
    );
  }
  f = message.getChannelMessageCid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional PaychInfo pay_channel = 1;
 * @return {?proto.ffs.rpc.PaychInfo}
 */
proto.ffs.rpc.CreatePayChannelResponse.prototype.getPayChannel = function() {
  return /** @type{?proto.ffs.rpc.PaychInfo} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.PaychInfo, 1));
};


/**
 * @param {?proto.ffs.rpc.PaychInfo|undefined} value
 * @return {!proto.ffs.rpc.CreatePayChannelResponse} returns this
*/
proto.ffs.rpc.CreatePayChannelResponse.prototype.setPayChannel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.CreatePayChannelResponse} returns this
 */
proto.ffs.rpc.CreatePayChannelResponse.prototype.clearPayChannel = function() {
  return this.setPayChannel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.CreatePayChannelResponse.prototype.hasPayChannel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string channel_message_cid = 2;
 * @return {string}
 */
proto.ffs.rpc.CreatePayChannelResponse.prototype.getChannelMessageCid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.CreatePayChannelResponse} returns this
 */
proto.ffs.rpc.CreatePayChannelResponse.prototype.setChannelMessageCid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.RedeemPayChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.RedeemPayChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.RedeemPayChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RedeemPayChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payChannelAddr: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.RedeemPayChannelRequest}
 */
proto.ffs.rpc.RedeemPayChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.RedeemPayChannelRequest;
  return proto.ffs.rpc.RedeemPayChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.RedeemPayChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.RedeemPayChannelRequest}
 */
proto.ffs.rpc.RedeemPayChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayChannelAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.RedeemPayChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.RedeemPayChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.RedeemPayChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RedeemPayChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayChannelAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pay_channel_addr = 1;
 * @return {string}
 */
proto.ffs.rpc.RedeemPayChannelRequest.prototype.getPayChannelAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ffs.rpc.RedeemPayChannelRequest} returns this
 */
proto.ffs.rpc.RedeemPayChannelRequest.prototype.setPayChannelAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.RedeemPayChannelResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.RedeemPayChannelResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.RedeemPayChannelResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RedeemPayChannelResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.RedeemPayChannelResponse}
 */
proto.ffs.rpc.RedeemPayChannelResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.RedeemPayChannelResponse;
  return proto.ffs.rpc.RedeemPayChannelResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.RedeemPayChannelResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.RedeemPayChannelResponse}
 */
proto.ffs.rpc.RedeemPayChannelResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.RedeemPayChannelResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.RedeemPayChannelResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.RedeemPayChannelResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.RedeemPayChannelResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListStorageDealRecordsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListStorageDealRecordsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.ffs.rpc.ListDealRecordsConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListStorageDealRecordsRequest}
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListStorageDealRecordsRequest;
  return proto.ffs.rpc.ListStorageDealRecordsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListStorageDealRecordsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListStorageDealRecordsRequest}
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.ListDealRecordsConfig;
      reader.readMessage(value,proto.ffs.rpc.ListDealRecordsConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListStorageDealRecordsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListStorageDealRecordsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.ListDealRecordsConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ListDealRecordsConfig config = 1;
 * @return {?proto.ffs.rpc.ListDealRecordsConfig}
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.prototype.getConfig = function() {
  return /** @type{?proto.ffs.rpc.ListDealRecordsConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.ListDealRecordsConfig, 1));
};


/**
 * @param {?proto.ffs.rpc.ListDealRecordsConfig|undefined} value
 * @return {!proto.ffs.rpc.ListStorageDealRecordsRequest} returns this
*/
proto.ffs.rpc.ListStorageDealRecordsRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.ListStorageDealRecordsRequest} returns this
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.ListStorageDealRecordsRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListStorageDealRecordsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListStorageDealRecordsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.ffs.rpc.StorageDealRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListStorageDealRecordsResponse}
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListStorageDealRecordsResponse;
  return proto.ffs.rpc.ListStorageDealRecordsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListStorageDealRecordsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListStorageDealRecordsResponse}
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.StorageDealRecord;
      reader.readMessage(value,proto.ffs.rpc.StorageDealRecord.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListStorageDealRecordsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListStorageDealRecordsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffs.rpc.StorageDealRecord.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StorageDealRecord records = 1;
 * @return {!Array<!proto.ffs.rpc.StorageDealRecord>}
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.ffs.rpc.StorageDealRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffs.rpc.StorageDealRecord, 1));
};


/**
 * @param {!Array<!proto.ffs.rpc.StorageDealRecord>} value
 * @return {!proto.ffs.rpc.ListStorageDealRecordsResponse} returns this
*/
proto.ffs.rpc.ListStorageDealRecordsResponse.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffs.rpc.StorageDealRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.StorageDealRecord}
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffs.rpc.StorageDealRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.ListStorageDealRecordsResponse} returns this
 */
proto.ffs.rpc.ListStorageDealRecordsResponse.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListRetrievalDealRecordsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListRetrievalDealRecordsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.ffs.rpc.ListDealRecordsConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListRetrievalDealRecordsRequest}
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListRetrievalDealRecordsRequest;
  return proto.ffs.rpc.ListRetrievalDealRecordsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListRetrievalDealRecordsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListRetrievalDealRecordsRequest}
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.ListDealRecordsConfig;
      reader.readMessage(value,proto.ffs.rpc.ListDealRecordsConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListRetrievalDealRecordsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListRetrievalDealRecordsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ffs.rpc.ListDealRecordsConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ListDealRecordsConfig config = 1;
 * @return {?proto.ffs.rpc.ListDealRecordsConfig}
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.prototype.getConfig = function() {
  return /** @type{?proto.ffs.rpc.ListDealRecordsConfig} */ (
    jspb.Message.getWrapperField(this, proto.ffs.rpc.ListDealRecordsConfig, 1));
};


/**
 * @param {?proto.ffs.rpc.ListDealRecordsConfig|undefined} value
 * @return {!proto.ffs.rpc.ListRetrievalDealRecordsRequest} returns this
*/
proto.ffs.rpc.ListRetrievalDealRecordsRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ffs.rpc.ListRetrievalDealRecordsRequest} returns this
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ffs.rpc.ListRetrievalDealRecordsRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ListRetrievalDealRecordsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ListRetrievalDealRecordsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordsList: jspb.Message.toObjectList(msg.getRecordsList(),
    proto.ffs.rpc.RetrievalDealRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ListRetrievalDealRecordsResponse}
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ListRetrievalDealRecordsResponse;
  return proto.ffs.rpc.ListRetrievalDealRecordsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ListRetrievalDealRecordsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ListRetrievalDealRecordsResponse}
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.RetrievalDealRecord;
      reader.readMessage(value,proto.ffs.rpc.RetrievalDealRecord.deserializeBinaryFromReader);
      msg.addRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ListRetrievalDealRecordsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ListRetrievalDealRecordsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffs.rpc.RetrievalDealRecord.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RetrievalDealRecord records = 1;
 * @return {!Array<!proto.ffs.rpc.RetrievalDealRecord>}
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.prototype.getRecordsList = function() {
  return /** @type{!Array<!proto.ffs.rpc.RetrievalDealRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffs.rpc.RetrievalDealRecord, 1));
};


/**
 * @param {!Array<!proto.ffs.rpc.RetrievalDealRecord>} value
 * @return {!proto.ffs.rpc.ListRetrievalDealRecordsResponse} returns this
*/
proto.ffs.rpc.ListRetrievalDealRecordsResponse.prototype.setRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffs.rpc.RetrievalDealRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.RetrievalDealRecord}
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.prototype.addRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffs.rpc.RetrievalDealRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.ListRetrievalDealRecordsResponse} returns this
 */
proto.ffs.rpc.ListRetrievalDealRecordsResponse.prototype.clearRecordsList = function() {
  return this.setRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ShowAllRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ShowAllRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ShowAllRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ShowAllRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ShowAllRequest}
 */
proto.ffs.rpc.ShowAllRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ShowAllRequest;
  return proto.ffs.rpc.ShowAllRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ShowAllRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ShowAllRequest}
 */
proto.ffs.rpc.ShowAllRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ShowAllRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ShowAllRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ShowAllRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ShowAllRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ffs.rpc.ShowAllResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ffs.rpc.ShowAllResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ffs.rpc.ShowAllResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ffs.rpc.ShowAllResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ShowAllResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cidInfosList: jspb.Message.toObjectList(msg.getCidInfosList(),
    proto.ffs.rpc.CidInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ffs.rpc.ShowAllResponse}
 */
proto.ffs.rpc.ShowAllResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ffs.rpc.ShowAllResponse;
  return proto.ffs.rpc.ShowAllResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ffs.rpc.ShowAllResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ffs.rpc.ShowAllResponse}
 */
proto.ffs.rpc.ShowAllResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ffs.rpc.CidInfo;
      reader.readMessage(value,proto.ffs.rpc.CidInfo.deserializeBinaryFromReader);
      msg.addCidInfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ffs.rpc.ShowAllResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ffs.rpc.ShowAllResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ffs.rpc.ShowAllResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ffs.rpc.ShowAllResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCidInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ffs.rpc.CidInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CidInfo cid_infos = 1;
 * @return {!Array<!proto.ffs.rpc.CidInfo>}
 */
proto.ffs.rpc.ShowAllResponse.prototype.getCidInfosList = function() {
  return /** @type{!Array<!proto.ffs.rpc.CidInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ffs.rpc.CidInfo, 1));
};


/**
 * @param {!Array<!proto.ffs.rpc.CidInfo>} value
 * @return {!proto.ffs.rpc.ShowAllResponse} returns this
*/
proto.ffs.rpc.ShowAllResponse.prototype.setCidInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ffs.rpc.CidInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ffs.rpc.CidInfo}
 */
proto.ffs.rpc.ShowAllResponse.prototype.addCidInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ffs.rpc.CidInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ffs.rpc.ShowAllResponse} returns this
 */
proto.ffs.rpc.ShowAllResponse.prototype.clearCidInfosList = function() {
  return this.setCidInfosList([]);
};


/**
 * @enum {number}
 */
proto.ffs.rpc.JobStatus = {
  JOB_STATUS_UNSPECIFIED: 0,
  JOB_STATUS_QUEUED: 1,
  JOB_STATUS_EXECUTING: 2,
  JOB_STATUS_FAILED: 3,
  JOB_STATUS_CANCELED: 4,
  JOB_STATUS_SUCCESS: 5
};

/**
 * @enum {number}
 */
proto.ffs.rpc.Direction = {
  DIRECTION_UNSPECIFIED: 0,
  DIRECTION_INBOUND: 1,
  DIRECTION_OUTBOUND: 2
};

goog.object.extend(exports, proto.ffs.rpc);
