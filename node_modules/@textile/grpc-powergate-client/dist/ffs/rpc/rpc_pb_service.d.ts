// package: ffs.rpc
// file: ffs/rpc/rpc.proto

import * as ffs_rpc_rpc_pb from "../../ffs/rpc/rpc_pb";
import {grpc} from "@improbable-eng/grpc-web";

type RPCServiceCreate = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.CreateRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.CreateResponse;
};

type RPCServiceListAPI = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.ListAPIRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.ListAPIResponse;
};

type RPCServiceID = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.IDRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.IDResponse;
};

type RPCServiceAddrs = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.AddrsRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.AddrsResponse;
};

type RPCServiceDefaultStorageConfig = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.DefaultStorageConfigRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.DefaultStorageConfigResponse;
};

type RPCServiceNewAddr = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.NewAddrRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.NewAddrResponse;
};

type RPCServiceGetStorageConfig = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.GetStorageConfigRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.GetStorageConfigResponse;
};

type RPCServiceSetDefaultStorageConfig = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.SetDefaultStorageConfigRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.SetDefaultStorageConfigResponse;
};

type RPCServiceShow = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.ShowRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.ShowResponse;
};

type RPCServiceInfo = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.InfoRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.InfoResponse;
};

type RPCServiceCancelJob = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.CancelJobRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.CancelJobResponse;
};

type RPCServiceGetStorageJob = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.GetStorageJobRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.GetStorageJobResponse;
};

type RPCServiceWatchJobs = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof ffs_rpc_rpc_pb.WatchJobsRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.WatchJobsResponse;
};

type RPCServiceWatchLogs = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof ffs_rpc_rpc_pb.WatchLogsRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.WatchLogsResponse;
};

type RPCServiceReplace = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.ReplaceRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.ReplaceResponse;
};

type RPCServicePushStorageConfig = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.PushStorageConfigRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.PushStorageConfigResponse;
};

type RPCServiceRemove = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.RemoveRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.RemoveResponse;
};

type RPCServiceGet = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof ffs_rpc_rpc_pb.GetRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.GetResponse;
};

type RPCServiceSendFil = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.SendFilRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.SendFilResponse;
};

type RPCServiceStage = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: true;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.StageRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.StageResponse;
};

type RPCServiceListPayChannels = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.ListPayChannelsRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.ListPayChannelsResponse;
};

type RPCServiceCreatePayChannel = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.CreatePayChannelRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.CreatePayChannelResponse;
};

type RPCServiceRedeemPayChannel = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.RedeemPayChannelRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.RedeemPayChannelResponse;
};

type RPCServiceListStorageDealRecords = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.ListStorageDealRecordsRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.ListStorageDealRecordsResponse;
};

type RPCServiceListRetrievalDealRecords = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.ListRetrievalDealRecordsRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.ListRetrievalDealRecordsResponse;
};

type RPCServiceShowAll = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof ffs_rpc_rpc_pb.ShowAllRequest;
  readonly responseType: typeof ffs_rpc_rpc_pb.ShowAllResponse;
};

export class RPCService {
  static readonly serviceName: string;
  static readonly Create: RPCServiceCreate;
  static readonly ListAPI: RPCServiceListAPI;
  static readonly ID: RPCServiceID;
  static readonly Addrs: RPCServiceAddrs;
  static readonly DefaultStorageConfig: RPCServiceDefaultStorageConfig;
  static readonly NewAddr: RPCServiceNewAddr;
  static readonly GetStorageConfig: RPCServiceGetStorageConfig;
  static readonly SetDefaultStorageConfig: RPCServiceSetDefaultStorageConfig;
  static readonly Show: RPCServiceShow;
  static readonly Info: RPCServiceInfo;
  static readonly CancelJob: RPCServiceCancelJob;
  static readonly GetStorageJob: RPCServiceGetStorageJob;
  static readonly WatchJobs: RPCServiceWatchJobs;
  static readonly WatchLogs: RPCServiceWatchLogs;
  static readonly Replace: RPCServiceReplace;
  static readonly PushStorageConfig: RPCServicePushStorageConfig;
  static readonly Remove: RPCServiceRemove;
  static readonly Get: RPCServiceGet;
  static readonly SendFil: RPCServiceSendFil;
  static readonly Stage: RPCServiceStage;
  static readonly ListPayChannels: RPCServiceListPayChannels;
  static readonly CreatePayChannel: RPCServiceCreatePayChannel;
  static readonly RedeemPayChannel: RPCServiceRedeemPayChannel;
  static readonly ListStorageDealRecords: RPCServiceListStorageDealRecords;
  static readonly ListRetrievalDealRecords: RPCServiceListRetrievalDealRecords;
  static readonly ShowAll: RPCServiceShowAll;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class RPCServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  create(
    requestMessage: ffs_rpc_rpc_pb.CreateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.CreateResponse|null) => void
  ): UnaryResponse;
  create(
    requestMessage: ffs_rpc_rpc_pb.CreateRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.CreateResponse|null) => void
  ): UnaryResponse;
  listAPI(
    requestMessage: ffs_rpc_rpc_pb.ListAPIRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ListAPIResponse|null) => void
  ): UnaryResponse;
  listAPI(
    requestMessage: ffs_rpc_rpc_pb.ListAPIRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ListAPIResponse|null) => void
  ): UnaryResponse;
  iD(
    requestMessage: ffs_rpc_rpc_pb.IDRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.IDResponse|null) => void
  ): UnaryResponse;
  iD(
    requestMessage: ffs_rpc_rpc_pb.IDRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.IDResponse|null) => void
  ): UnaryResponse;
  addrs(
    requestMessage: ffs_rpc_rpc_pb.AddrsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.AddrsResponse|null) => void
  ): UnaryResponse;
  addrs(
    requestMessage: ffs_rpc_rpc_pb.AddrsRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.AddrsResponse|null) => void
  ): UnaryResponse;
  defaultStorageConfig(
    requestMessage: ffs_rpc_rpc_pb.DefaultStorageConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.DefaultStorageConfigResponse|null) => void
  ): UnaryResponse;
  defaultStorageConfig(
    requestMessage: ffs_rpc_rpc_pb.DefaultStorageConfigRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.DefaultStorageConfigResponse|null) => void
  ): UnaryResponse;
  newAddr(
    requestMessage: ffs_rpc_rpc_pb.NewAddrRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.NewAddrResponse|null) => void
  ): UnaryResponse;
  newAddr(
    requestMessage: ffs_rpc_rpc_pb.NewAddrRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.NewAddrResponse|null) => void
  ): UnaryResponse;
  getStorageConfig(
    requestMessage: ffs_rpc_rpc_pb.GetStorageConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.GetStorageConfigResponse|null) => void
  ): UnaryResponse;
  getStorageConfig(
    requestMessage: ffs_rpc_rpc_pb.GetStorageConfigRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.GetStorageConfigResponse|null) => void
  ): UnaryResponse;
  setDefaultStorageConfig(
    requestMessage: ffs_rpc_rpc_pb.SetDefaultStorageConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.SetDefaultStorageConfigResponse|null) => void
  ): UnaryResponse;
  setDefaultStorageConfig(
    requestMessage: ffs_rpc_rpc_pb.SetDefaultStorageConfigRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.SetDefaultStorageConfigResponse|null) => void
  ): UnaryResponse;
  show(
    requestMessage: ffs_rpc_rpc_pb.ShowRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ShowResponse|null) => void
  ): UnaryResponse;
  show(
    requestMessage: ffs_rpc_rpc_pb.ShowRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ShowResponse|null) => void
  ): UnaryResponse;
  info(
    requestMessage: ffs_rpc_rpc_pb.InfoRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.InfoResponse|null) => void
  ): UnaryResponse;
  info(
    requestMessage: ffs_rpc_rpc_pb.InfoRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.InfoResponse|null) => void
  ): UnaryResponse;
  cancelJob(
    requestMessage: ffs_rpc_rpc_pb.CancelJobRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.CancelJobResponse|null) => void
  ): UnaryResponse;
  cancelJob(
    requestMessage: ffs_rpc_rpc_pb.CancelJobRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.CancelJobResponse|null) => void
  ): UnaryResponse;
  getStorageJob(
    requestMessage: ffs_rpc_rpc_pb.GetStorageJobRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.GetStorageJobResponse|null) => void
  ): UnaryResponse;
  getStorageJob(
    requestMessage: ffs_rpc_rpc_pb.GetStorageJobRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.GetStorageJobResponse|null) => void
  ): UnaryResponse;
  watchJobs(requestMessage: ffs_rpc_rpc_pb.WatchJobsRequest, metadata?: grpc.Metadata): ResponseStream<ffs_rpc_rpc_pb.WatchJobsResponse>;
  watchLogs(requestMessage: ffs_rpc_rpc_pb.WatchLogsRequest, metadata?: grpc.Metadata): ResponseStream<ffs_rpc_rpc_pb.WatchLogsResponse>;
  replace(
    requestMessage: ffs_rpc_rpc_pb.ReplaceRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ReplaceResponse|null) => void
  ): UnaryResponse;
  replace(
    requestMessage: ffs_rpc_rpc_pb.ReplaceRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ReplaceResponse|null) => void
  ): UnaryResponse;
  pushStorageConfig(
    requestMessage: ffs_rpc_rpc_pb.PushStorageConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.PushStorageConfigResponse|null) => void
  ): UnaryResponse;
  pushStorageConfig(
    requestMessage: ffs_rpc_rpc_pb.PushStorageConfigRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.PushStorageConfigResponse|null) => void
  ): UnaryResponse;
  remove(
    requestMessage: ffs_rpc_rpc_pb.RemoveRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.RemoveResponse|null) => void
  ): UnaryResponse;
  remove(
    requestMessage: ffs_rpc_rpc_pb.RemoveRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.RemoveResponse|null) => void
  ): UnaryResponse;
  get(requestMessage: ffs_rpc_rpc_pb.GetRequest, metadata?: grpc.Metadata): ResponseStream<ffs_rpc_rpc_pb.GetResponse>;
  sendFil(
    requestMessage: ffs_rpc_rpc_pb.SendFilRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.SendFilResponse|null) => void
  ): UnaryResponse;
  sendFil(
    requestMessage: ffs_rpc_rpc_pb.SendFilRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.SendFilResponse|null) => void
  ): UnaryResponse;
  stage(metadata?: grpc.Metadata): RequestStream<ffs_rpc_rpc_pb.StageRequest>;
  listPayChannels(
    requestMessage: ffs_rpc_rpc_pb.ListPayChannelsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ListPayChannelsResponse|null) => void
  ): UnaryResponse;
  listPayChannels(
    requestMessage: ffs_rpc_rpc_pb.ListPayChannelsRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ListPayChannelsResponse|null) => void
  ): UnaryResponse;
  createPayChannel(
    requestMessage: ffs_rpc_rpc_pb.CreatePayChannelRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.CreatePayChannelResponse|null) => void
  ): UnaryResponse;
  createPayChannel(
    requestMessage: ffs_rpc_rpc_pb.CreatePayChannelRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.CreatePayChannelResponse|null) => void
  ): UnaryResponse;
  redeemPayChannel(
    requestMessage: ffs_rpc_rpc_pb.RedeemPayChannelRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.RedeemPayChannelResponse|null) => void
  ): UnaryResponse;
  redeemPayChannel(
    requestMessage: ffs_rpc_rpc_pb.RedeemPayChannelRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.RedeemPayChannelResponse|null) => void
  ): UnaryResponse;
  listStorageDealRecords(
    requestMessage: ffs_rpc_rpc_pb.ListStorageDealRecordsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ListStorageDealRecordsResponse|null) => void
  ): UnaryResponse;
  listStorageDealRecords(
    requestMessage: ffs_rpc_rpc_pb.ListStorageDealRecordsRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ListStorageDealRecordsResponse|null) => void
  ): UnaryResponse;
  listRetrievalDealRecords(
    requestMessage: ffs_rpc_rpc_pb.ListRetrievalDealRecordsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ListRetrievalDealRecordsResponse|null) => void
  ): UnaryResponse;
  listRetrievalDealRecords(
    requestMessage: ffs_rpc_rpc_pb.ListRetrievalDealRecordsRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ListRetrievalDealRecordsResponse|null) => void
  ): UnaryResponse;
  showAll(
    requestMessage: ffs_rpc_rpc_pb.ShowAllRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ShowAllResponse|null) => void
  ): UnaryResponse;
  showAll(
    requestMessage: ffs_rpc_rpc_pb.ShowAllRequest,
    callback: (error: ServiceError|null, responseMessage: ffs_rpc_rpc_pb.ShowAllResponse|null) => void
  ): UnaryResponse;
}

