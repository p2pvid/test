// package: ffs.rpc
// file: ffs/rpc/rpc.proto

var ffs_rpc_rpc_pb = require("../../ffs/rpc/rpc_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var RPCService = (function () {
  function RPCService() {}
  RPCService.serviceName = "ffs.rpc.RPCService";
  return RPCService;
}());

RPCService.Create = {
  methodName: "Create",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.CreateRequest,
  responseType: ffs_rpc_rpc_pb.CreateResponse
};

RPCService.ListAPI = {
  methodName: "ListAPI",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.ListAPIRequest,
  responseType: ffs_rpc_rpc_pb.ListAPIResponse
};

RPCService.ID = {
  methodName: "ID",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.IDRequest,
  responseType: ffs_rpc_rpc_pb.IDResponse
};

RPCService.Addrs = {
  methodName: "Addrs",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.AddrsRequest,
  responseType: ffs_rpc_rpc_pb.AddrsResponse
};

RPCService.DefaultStorageConfig = {
  methodName: "DefaultStorageConfig",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.DefaultStorageConfigRequest,
  responseType: ffs_rpc_rpc_pb.DefaultStorageConfigResponse
};

RPCService.NewAddr = {
  methodName: "NewAddr",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.NewAddrRequest,
  responseType: ffs_rpc_rpc_pb.NewAddrResponse
};

RPCService.GetStorageConfig = {
  methodName: "GetStorageConfig",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.GetStorageConfigRequest,
  responseType: ffs_rpc_rpc_pb.GetStorageConfigResponse
};

RPCService.SetDefaultStorageConfig = {
  methodName: "SetDefaultStorageConfig",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.SetDefaultStorageConfigRequest,
  responseType: ffs_rpc_rpc_pb.SetDefaultStorageConfigResponse
};

RPCService.Show = {
  methodName: "Show",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.ShowRequest,
  responseType: ffs_rpc_rpc_pb.ShowResponse
};

RPCService.Info = {
  methodName: "Info",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.InfoRequest,
  responseType: ffs_rpc_rpc_pb.InfoResponse
};

RPCService.CancelJob = {
  methodName: "CancelJob",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.CancelJobRequest,
  responseType: ffs_rpc_rpc_pb.CancelJobResponse
};

RPCService.GetStorageJob = {
  methodName: "GetStorageJob",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.GetStorageJobRequest,
  responseType: ffs_rpc_rpc_pb.GetStorageJobResponse
};

RPCService.WatchJobs = {
  methodName: "WatchJobs",
  service: RPCService,
  requestStream: false,
  responseStream: true,
  requestType: ffs_rpc_rpc_pb.WatchJobsRequest,
  responseType: ffs_rpc_rpc_pb.WatchJobsResponse
};

RPCService.WatchLogs = {
  methodName: "WatchLogs",
  service: RPCService,
  requestStream: false,
  responseStream: true,
  requestType: ffs_rpc_rpc_pb.WatchLogsRequest,
  responseType: ffs_rpc_rpc_pb.WatchLogsResponse
};

RPCService.Replace = {
  methodName: "Replace",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.ReplaceRequest,
  responseType: ffs_rpc_rpc_pb.ReplaceResponse
};

RPCService.PushStorageConfig = {
  methodName: "PushStorageConfig",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.PushStorageConfigRequest,
  responseType: ffs_rpc_rpc_pb.PushStorageConfigResponse
};

RPCService.Remove = {
  methodName: "Remove",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.RemoveRequest,
  responseType: ffs_rpc_rpc_pb.RemoveResponse
};

RPCService.Get = {
  methodName: "Get",
  service: RPCService,
  requestStream: false,
  responseStream: true,
  requestType: ffs_rpc_rpc_pb.GetRequest,
  responseType: ffs_rpc_rpc_pb.GetResponse
};

RPCService.SendFil = {
  methodName: "SendFil",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.SendFilRequest,
  responseType: ffs_rpc_rpc_pb.SendFilResponse
};

RPCService.Stage = {
  methodName: "Stage",
  service: RPCService,
  requestStream: true,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.StageRequest,
  responseType: ffs_rpc_rpc_pb.StageResponse
};

RPCService.ListPayChannels = {
  methodName: "ListPayChannels",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.ListPayChannelsRequest,
  responseType: ffs_rpc_rpc_pb.ListPayChannelsResponse
};

RPCService.CreatePayChannel = {
  methodName: "CreatePayChannel",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.CreatePayChannelRequest,
  responseType: ffs_rpc_rpc_pb.CreatePayChannelResponse
};

RPCService.RedeemPayChannel = {
  methodName: "RedeemPayChannel",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.RedeemPayChannelRequest,
  responseType: ffs_rpc_rpc_pb.RedeemPayChannelResponse
};

RPCService.ListStorageDealRecords = {
  methodName: "ListStorageDealRecords",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.ListStorageDealRecordsRequest,
  responseType: ffs_rpc_rpc_pb.ListStorageDealRecordsResponse
};

RPCService.ListRetrievalDealRecords = {
  methodName: "ListRetrievalDealRecords",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.ListRetrievalDealRecordsRequest,
  responseType: ffs_rpc_rpc_pb.ListRetrievalDealRecordsResponse
};

RPCService.ShowAll = {
  methodName: "ShowAll",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: ffs_rpc_rpc_pb.ShowAllRequest,
  responseType: ffs_rpc_rpc_pb.ShowAllResponse
};

exports.RPCService = RPCService;

function RPCServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

RPCServiceClient.prototype.create = function create(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Create, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.listAPI = function listAPI(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.ListAPI, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.iD = function iD(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.ID, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.addrs = function addrs(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Addrs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.defaultStorageConfig = function defaultStorageConfig(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.DefaultStorageConfig, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.newAddr = function newAddr(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.NewAddr, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.getStorageConfig = function getStorageConfig(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.GetStorageConfig, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.setDefaultStorageConfig = function setDefaultStorageConfig(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.SetDefaultStorageConfig, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.show = function show(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Show, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.info = function info(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Info, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.cancelJob = function cancelJob(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.CancelJob, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.getStorageJob = function getStorageJob(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.GetStorageJob, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.watchJobs = function watchJobs(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(RPCService.WatchJobs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.watchLogs = function watchLogs(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(RPCService.WatchLogs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.replace = function replace(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Replace, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.pushStorageConfig = function pushStorageConfig(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.PushStorageConfig, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.remove = function remove(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Remove, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.get = function get(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(RPCService.Get, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.sendFil = function sendFil(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.SendFil, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.stage = function stage(metadata) {
  var listeners = {
    end: [],
    status: []
  };
  var client = grpc.client(RPCService.Stage, {
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport
  });
  client.onEnd(function (status, statusMessage, trailers) {
    listeners.status.forEach(function (handler) {
      handler({ code: status, details: statusMessage, metadata: trailers });
    });
    listeners.end.forEach(function (handler) {
      handler({ code: status, details: statusMessage, metadata: trailers });
    });
    listeners = null;
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    write: function (requestMessage) {
      if (!client.started) {
        client.start(metadata);
      }
      client.send(requestMessage);
      return this;
    },
    end: function () {
      client.finishSend();
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.listPayChannels = function listPayChannels(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.ListPayChannels, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.createPayChannel = function createPayChannel(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.CreatePayChannel, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.redeemPayChannel = function redeemPayChannel(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.RedeemPayChannel, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.listStorageDealRecords = function listStorageDealRecords(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.ListStorageDealRecords, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.listRetrievalDealRecords = function listRetrievalDealRecords(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.ListRetrievalDealRecords, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.showAll = function showAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.ShowAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.RPCServiceClient = RPCServiceClient;

