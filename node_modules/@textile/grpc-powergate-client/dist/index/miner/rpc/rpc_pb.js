// source: index/miner/rpc/rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.index.miner.rpc.GetRequest', null, global);
goog.exportSymbol('proto.index.miner.rpc.GetResponse', null, global);
goog.exportSymbol('proto.index.miner.rpc.Index', null, global);
goog.exportSymbol('proto.index.miner.rpc.Location', null, global);
goog.exportSymbol('proto.index.miner.rpc.Meta', null, global);
goog.exportSymbol('proto.index.miner.rpc.MetaIndex', null, global);
goog.exportSymbol('proto.index.miner.rpc.OnChainData', null, global);
goog.exportSymbol('proto.index.miner.rpc.OnChainIndex', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.index.miner.rpc.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.index.miner.rpc.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.index.miner.rpc.Index.displayName = 'proto.index.miner.rpc.Index';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.index.miner.rpc.OnChainIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.index.miner.rpc.OnChainIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.index.miner.rpc.OnChainIndex.displayName = 'proto.index.miner.rpc.OnChainIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.index.miner.rpc.OnChainData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.index.miner.rpc.OnChainData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.index.miner.rpc.OnChainData.displayName = 'proto.index.miner.rpc.OnChainData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.index.miner.rpc.MetaIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.index.miner.rpc.MetaIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.index.miner.rpc.MetaIndex.displayName = 'proto.index.miner.rpc.MetaIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.index.miner.rpc.Meta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.index.miner.rpc.Meta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.index.miner.rpc.Meta.displayName = 'proto.index.miner.rpc.Meta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.index.miner.rpc.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.index.miner.rpc.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.index.miner.rpc.Location.displayName = 'proto.index.miner.rpc.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.index.miner.rpc.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.index.miner.rpc.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.index.miner.rpc.GetRequest.displayName = 'proto.index.miner.rpc.GetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.index.miner.rpc.GetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.index.miner.rpc.GetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.index.miner.rpc.GetResponse.displayName = 'proto.index.miner.rpc.GetResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.index.miner.rpc.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.index.miner.rpc.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.index.miner.rpc.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.index.miner.rpc.MetaIndex.toObject(includeInstance, f),
    chain: (f = msg.getChain()) && proto.index.miner.rpc.OnChainIndex.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.index.miner.rpc.Index}
 */
proto.index.miner.rpc.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.index.miner.rpc.Index;
  return proto.index.miner.rpc.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.index.miner.rpc.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.index.miner.rpc.Index}
 */
proto.index.miner.rpc.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.index.miner.rpc.MetaIndex;
      reader.readMessage(value,proto.index.miner.rpc.MetaIndex.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new proto.index.miner.rpc.OnChainIndex;
      reader.readMessage(value,proto.index.miner.rpc.OnChainIndex.deserializeBinaryFromReader);
      msg.setChain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.index.miner.rpc.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.index.miner.rpc.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.index.miner.rpc.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.index.miner.rpc.MetaIndex.serializeBinaryToWriter
    );
  }
  f = message.getChain();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.index.miner.rpc.OnChainIndex.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetaIndex meta = 1;
 * @return {?proto.index.miner.rpc.MetaIndex}
 */
proto.index.miner.rpc.Index.prototype.getMeta = function() {
  return /** @type{?proto.index.miner.rpc.MetaIndex} */ (
    jspb.Message.getWrapperField(this, proto.index.miner.rpc.MetaIndex, 1));
};


/**
 * @param {?proto.index.miner.rpc.MetaIndex|undefined} value
 * @return {!proto.index.miner.rpc.Index} returns this
*/
proto.index.miner.rpc.Index.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.index.miner.rpc.Index} returns this
 */
proto.index.miner.rpc.Index.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.index.miner.rpc.Index.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OnChainIndex chain = 2;
 * @return {?proto.index.miner.rpc.OnChainIndex}
 */
proto.index.miner.rpc.Index.prototype.getChain = function() {
  return /** @type{?proto.index.miner.rpc.OnChainIndex} */ (
    jspb.Message.getWrapperField(this, proto.index.miner.rpc.OnChainIndex, 2));
};


/**
 * @param {?proto.index.miner.rpc.OnChainIndex|undefined} value
 * @return {!proto.index.miner.rpc.Index} returns this
*/
proto.index.miner.rpc.Index.prototype.setChain = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.index.miner.rpc.Index} returns this
 */
proto.index.miner.rpc.Index.prototype.clearChain = function() {
  return this.setChain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.index.miner.rpc.Index.prototype.hasChain = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.index.miner.rpc.OnChainIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.index.miner.rpc.OnChainIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.index.miner.rpc.OnChainIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.OnChainIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastUpdated: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minersMap: (f = msg.getMinersMap()) ? f.toObject(includeInstance, proto.index.miner.rpc.OnChainData.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.index.miner.rpc.OnChainIndex}
 */
proto.index.miner.rpc.OnChainIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.index.miner.rpc.OnChainIndex;
  return proto.index.miner.rpc.OnChainIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.index.miner.rpc.OnChainIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.index.miner.rpc.OnChainIndex}
 */
proto.index.miner.rpc.OnChainIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdated(value);
      break;
    case 2:
      var value = msg.getMinersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.index.miner.rpc.OnChainData.deserializeBinaryFromReader, "", new proto.index.miner.rpc.OnChainData());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.index.miner.rpc.OnChainIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.index.miner.rpc.OnChainIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.index.miner.rpc.OnChainIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.OnChainIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastUpdated();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMinersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.index.miner.rpc.OnChainData.serializeBinaryToWriter);
  }
};


/**
 * optional int64 last_updated = 1;
 * @return {number}
 */
proto.index.miner.rpc.OnChainIndex.prototype.getLastUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.OnChainIndex} returns this
 */
proto.index.miner.rpc.OnChainIndex.prototype.setLastUpdated = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, OnChainData> miners = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.index.miner.rpc.OnChainData>}
 */
proto.index.miner.rpc.OnChainIndex.prototype.getMinersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.index.miner.rpc.OnChainData>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.index.miner.rpc.OnChainData));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.index.miner.rpc.OnChainIndex} returns this
 */
proto.index.miner.rpc.OnChainIndex.prototype.clearMinersMap = function() {
  this.getMinersMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.index.miner.rpc.OnChainData.prototype.toObject = function(opt_includeInstance) {
  return proto.index.miner.rpc.OnChainData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.index.miner.rpc.OnChainData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.OnChainData.toObject = function(includeInstance, msg) {
  var f, obj = {
    power: jspb.Message.getFieldWithDefault(msg, 1, 0),
    relativePower: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    sectorSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    activeDeals: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.index.miner.rpc.OnChainData}
 */
proto.index.miner.rpc.OnChainData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.index.miner.rpc.OnChainData;
  return proto.index.miner.rpc.OnChainData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.index.miner.rpc.OnChainData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.index.miner.rpc.OnChainData}
 */
proto.index.miner.rpc.OnChainData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPower(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRelativePower(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSectorSize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActiveDeals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.index.miner.rpc.OnChainData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.index.miner.rpc.OnChainData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.index.miner.rpc.OnChainData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.OnChainData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPower();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRelativePower();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getSectorSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getActiveDeals();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 power = 1;
 * @return {number}
 */
proto.index.miner.rpc.OnChainData.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.OnChainData} returns this
 */
proto.index.miner.rpc.OnChainData.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float relative_power = 2;
 * @return {number}
 */
proto.index.miner.rpc.OnChainData.prototype.getRelativePower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.OnChainData} returns this
 */
proto.index.miner.rpc.OnChainData.prototype.setRelativePower = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint64 sector_size = 3;
 * @return {number}
 */
proto.index.miner.rpc.OnChainData.prototype.getSectorSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.OnChainData} returns this
 */
proto.index.miner.rpc.OnChainData.prototype.setSectorSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 active_deals = 4;
 * @return {number}
 */
proto.index.miner.rpc.OnChainData.prototype.getActiveDeals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.OnChainData} returns this
 */
proto.index.miner.rpc.OnChainData.prototype.setActiveDeals = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.index.miner.rpc.MetaIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.index.miner.rpc.MetaIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.index.miner.rpc.MetaIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.MetaIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    online: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offline: jspb.Message.getFieldWithDefault(msg, 2, 0),
    infoMap: (f = msg.getInfoMap()) ? f.toObject(includeInstance, proto.index.miner.rpc.Meta.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.index.miner.rpc.MetaIndex}
 */
proto.index.miner.rpc.MetaIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.index.miner.rpc.MetaIndex;
  return proto.index.miner.rpc.MetaIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.index.miner.rpc.MetaIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.index.miner.rpc.MetaIndex}
 */
proto.index.miner.rpc.MetaIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOnline(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffline(value);
      break;
    case 3:
      var value = msg.getInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.index.miner.rpc.Meta.deserializeBinaryFromReader, "", new proto.index.miner.rpc.Meta());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.index.miner.rpc.MetaIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.index.miner.rpc.MetaIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.index.miner.rpc.MetaIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.MetaIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnline();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getOffline();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.index.miner.rpc.Meta.serializeBinaryToWriter);
  }
};


/**
 * optional uint32 online = 1;
 * @return {number}
 */
proto.index.miner.rpc.MetaIndex.prototype.getOnline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.MetaIndex} returns this
 */
proto.index.miner.rpc.MetaIndex.prototype.setOnline = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 offline = 2;
 * @return {number}
 */
proto.index.miner.rpc.MetaIndex.prototype.getOffline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.MetaIndex} returns this
 */
proto.index.miner.rpc.MetaIndex.prototype.setOffline = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, Meta> info = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.index.miner.rpc.Meta>}
 */
proto.index.miner.rpc.MetaIndex.prototype.getInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.index.miner.rpc.Meta>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.index.miner.rpc.Meta));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.index.miner.rpc.MetaIndex} returns this
 */
proto.index.miner.rpc.MetaIndex.prototype.clearInfoMap = function() {
  this.getInfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.index.miner.rpc.Meta.prototype.toObject = function(opt_includeInstance) {
  return proto.index.miner.rpc.Meta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.index.miner.rpc.Meta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.Meta.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastUpdated: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userAgent: jspb.Message.getFieldWithDefault(msg, 2, ""),
    location: (f = msg.getLocation()) && proto.index.miner.rpc.Location.toObject(includeInstance, f),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.index.miner.rpc.Meta}
 */
proto.index.miner.rpc.Meta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.index.miner.rpc.Meta;
  return proto.index.miner.rpc.Meta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.index.miner.rpc.Meta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.index.miner.rpc.Meta}
 */
proto.index.miner.rpc.Meta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdated(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    case 3:
      var value = new proto.index.miner.rpc.Location;
      reader.readMessage(value,proto.index.miner.rpc.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.index.miner.rpc.Meta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.index.miner.rpc.Meta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.index.miner.rpc.Meta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.Meta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastUpdated();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.index.miner.rpc.Location.serializeBinaryToWriter
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int64 last_updated = 1;
 * @return {number}
 */
proto.index.miner.rpc.Meta.prototype.getLastUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.Meta} returns this
 */
proto.index.miner.rpc.Meta.prototype.setLastUpdated = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string user_agent = 2;
 * @return {string}
 */
proto.index.miner.rpc.Meta.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.index.miner.rpc.Meta} returns this
 */
proto.index.miner.rpc.Meta.prototype.setUserAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Location location = 3;
 * @return {?proto.index.miner.rpc.Location}
 */
proto.index.miner.rpc.Meta.prototype.getLocation = function() {
  return /** @type{?proto.index.miner.rpc.Location} */ (
    jspb.Message.getWrapperField(this, proto.index.miner.rpc.Location, 3));
};


/**
 * @param {?proto.index.miner.rpc.Location|undefined} value
 * @return {!proto.index.miner.rpc.Meta} returns this
*/
proto.index.miner.rpc.Meta.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.index.miner.rpc.Meta} returns this
 */
proto.index.miner.rpc.Meta.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.index.miner.rpc.Meta.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool online = 4;
 * @return {boolean}
 */
proto.index.miner.rpc.Meta.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.index.miner.rpc.Meta} returns this
 */
proto.index.miner.rpc.Meta.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.index.miner.rpc.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.index.miner.rpc.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.index.miner.rpc.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, ""),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.index.miner.rpc.Location}
 */
proto.index.miner.rpc.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.index.miner.rpc.Location;
  return proto.index.miner.rpc.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.index.miner.rpc.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.index.miner.rpc.Location}
 */
proto.index.miner.rpc.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.index.miner.rpc.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.index.miner.rpc.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.index.miner.rpc.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional string country = 1;
 * @return {string}
 */
proto.index.miner.rpc.Location.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.index.miner.rpc.Location} returns this
 */
proto.index.miner.rpc.Location.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.index.miner.rpc.Location.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.Location} returns this
 */
proto.index.miner.rpc.Location.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double latitude = 3;
 * @return {number}
 */
proto.index.miner.rpc.Location.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.index.miner.rpc.Location} returns this
 */
proto.index.miner.rpc.Location.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.index.miner.rpc.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.index.miner.rpc.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.index.miner.rpc.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.index.miner.rpc.GetRequest}
 */
proto.index.miner.rpc.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.index.miner.rpc.GetRequest;
  return proto.index.miner.rpc.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.index.miner.rpc.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.index.miner.rpc.GetRequest}
 */
proto.index.miner.rpc.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.index.miner.rpc.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.index.miner.rpc.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.index.miner.rpc.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.index.miner.rpc.GetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.index.miner.rpc.GetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.index.miner.rpc.GetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.GetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: (f = msg.getIndex()) && proto.index.miner.rpc.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.index.miner.rpc.GetResponse}
 */
proto.index.miner.rpc.GetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.index.miner.rpc.GetResponse;
  return proto.index.miner.rpc.GetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.index.miner.rpc.GetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.index.miner.rpc.GetResponse}
 */
proto.index.miner.rpc.GetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.index.miner.rpc.Index;
      reader.readMessage(value,proto.index.miner.rpc.Index.deserializeBinaryFromReader);
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.index.miner.rpc.GetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.index.miner.rpc.GetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.index.miner.rpc.GetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.index.miner.rpc.GetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.index.miner.rpc.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional Index index = 1;
 * @return {?proto.index.miner.rpc.Index}
 */
proto.index.miner.rpc.GetResponse.prototype.getIndex = function() {
  return /** @type{?proto.index.miner.rpc.Index} */ (
    jspb.Message.getWrapperField(this, proto.index.miner.rpc.Index, 1));
};


/**
 * @param {?proto.index.miner.rpc.Index|undefined} value
 * @return {!proto.index.miner.rpc.GetResponse} returns this
*/
proto.index.miner.rpc.GetResponse.prototype.setIndex = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.index.miner.rpc.GetResponse} returns this
 */
proto.index.miner.rpc.GetResponse.prototype.clearIndex = function() {
  return this.setIndex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.index.miner.rpc.GetResponse.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.index.miner.rpc);
