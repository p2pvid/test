// package: net.rpc
// file: net/rpc/rpc.proto

import * as jspb from "google-protobuf";

export class PeerAddrInfo extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  clearAddrsList(): void;
  getAddrsList(): Array<string>;
  setAddrsList(value: Array<string>): void;
  addAddrs(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PeerAddrInfo.AsObject;
  static toObject(includeInstance: boolean, msg: PeerAddrInfo): PeerAddrInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PeerAddrInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PeerAddrInfo;
  static deserializeBinaryFromReader(message: PeerAddrInfo, reader: jspb.BinaryReader): PeerAddrInfo;
}

export namespace PeerAddrInfo {
  export type AsObject = {
    id: string,
    addrsList: Array<string>,
  }
}

export class Location extends jspb.Message {
  getCountry(): string;
  setCountry(value: string): void;

  getLatitude(): number;
  setLatitude(value: number): void;

  getLongitude(): number;
  setLongitude(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Location.AsObject;
  static toObject(includeInstance: boolean, msg: Location): Location.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Location, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Location;
  static deserializeBinaryFromReader(message: Location, reader: jspb.BinaryReader): Location;
}

export namespace Location {
  export type AsObject = {
    country: string,
    latitude: number,
    longitude: number,
  }
}

export class PeerInfo extends jspb.Message {
  hasAddrInfo(): boolean;
  clearAddrInfo(): void;
  getAddrInfo(): PeerAddrInfo | undefined;
  setAddrInfo(value?: PeerAddrInfo): void;

  hasLocation(): boolean;
  clearLocation(): void;
  getLocation(): Location | undefined;
  setLocation(value?: Location): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PeerInfo.AsObject;
  static toObject(includeInstance: boolean, msg: PeerInfo): PeerInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PeerInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PeerInfo;
  static deserializeBinaryFromReader(message: PeerInfo, reader: jspb.BinaryReader): PeerInfo;
}

export namespace PeerInfo {
  export type AsObject = {
    addrInfo?: PeerAddrInfo.AsObject,
    location?: Location.AsObject,
  }
}

export class ListenAddrRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListenAddrRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListenAddrRequest): ListenAddrRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListenAddrRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListenAddrRequest;
  static deserializeBinaryFromReader(message: ListenAddrRequest, reader: jspb.BinaryReader): ListenAddrRequest;
}

export namespace ListenAddrRequest {
  export type AsObject = {
  }
}

export class ListenAddrResponse extends jspb.Message {
  hasAddrInfo(): boolean;
  clearAddrInfo(): void;
  getAddrInfo(): PeerAddrInfo | undefined;
  setAddrInfo(value?: PeerAddrInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListenAddrResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListenAddrResponse): ListenAddrResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListenAddrResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListenAddrResponse;
  static deserializeBinaryFromReader(message: ListenAddrResponse, reader: jspb.BinaryReader): ListenAddrResponse;
}

export namespace ListenAddrResponse {
  export type AsObject = {
    addrInfo?: PeerAddrInfo.AsObject,
  }
}

export class PeersRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PeersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PeersRequest): PeersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PeersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PeersRequest;
  static deserializeBinaryFromReader(message: PeersRequest, reader: jspb.BinaryReader): PeersRequest;
}

export namespace PeersRequest {
  export type AsObject = {
  }
}

export class PeersResponse extends jspb.Message {
  clearPeersList(): void;
  getPeersList(): Array<PeerInfo>;
  setPeersList(value: Array<PeerInfo>): void;
  addPeers(value?: PeerInfo, index?: number): PeerInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PeersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PeersResponse): PeersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PeersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PeersResponse;
  static deserializeBinaryFromReader(message: PeersResponse, reader: jspb.BinaryReader): PeersResponse;
}

export namespace PeersResponse {
  export type AsObject = {
    peersList: Array<PeerInfo.AsObject>,
  }
}

export class FindPeerRequest extends jspb.Message {
  getPeerId(): string;
  setPeerId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindPeerRequest.AsObject;
  static toObject(includeInstance: boolean, msg: FindPeerRequest): FindPeerRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FindPeerRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindPeerRequest;
  static deserializeBinaryFromReader(message: FindPeerRequest, reader: jspb.BinaryReader): FindPeerRequest;
}

export namespace FindPeerRequest {
  export type AsObject = {
    peerId: string,
  }
}

export class FindPeerResponse extends jspb.Message {
  hasPeerInfo(): boolean;
  clearPeerInfo(): void;
  getPeerInfo(): PeerInfo | undefined;
  setPeerInfo(value?: PeerInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FindPeerResponse.AsObject;
  static toObject(includeInstance: boolean, msg: FindPeerResponse): FindPeerResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FindPeerResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FindPeerResponse;
  static deserializeBinaryFromReader(message: FindPeerResponse, reader: jspb.BinaryReader): FindPeerResponse;
}

export namespace FindPeerResponse {
  export type AsObject = {
    peerInfo?: PeerInfo.AsObject,
  }
}

export class ConnectPeerRequest extends jspb.Message {
  hasPeerInfo(): boolean;
  clearPeerInfo(): void;
  getPeerInfo(): PeerAddrInfo | undefined;
  setPeerInfo(value?: PeerAddrInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectPeerRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectPeerRequest): ConnectPeerRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectPeerRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectPeerRequest;
  static deserializeBinaryFromReader(message: ConnectPeerRequest, reader: jspb.BinaryReader): ConnectPeerRequest;
}

export namespace ConnectPeerRequest {
  export type AsObject = {
    peerInfo?: PeerAddrInfo.AsObject,
  }
}

export class ConnectPeerResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectPeerResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectPeerResponse): ConnectPeerResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectPeerResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectPeerResponse;
  static deserializeBinaryFromReader(message: ConnectPeerResponse, reader: jspb.BinaryReader): ConnectPeerResponse;
}

export namespace ConnectPeerResponse {
  export type AsObject = {
  }
}

export class DisconnectPeerRequest extends jspb.Message {
  getPeerId(): string;
  setPeerId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DisconnectPeerRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DisconnectPeerRequest): DisconnectPeerRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DisconnectPeerRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DisconnectPeerRequest;
  static deserializeBinaryFromReader(message: DisconnectPeerRequest, reader: jspb.BinaryReader): DisconnectPeerRequest;
}

export namespace DisconnectPeerRequest {
  export type AsObject = {
    peerId: string,
  }
}

export class DisconnectPeerResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DisconnectPeerResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DisconnectPeerResponse): DisconnectPeerResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DisconnectPeerResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DisconnectPeerResponse;
  static deserializeBinaryFromReader(message: DisconnectPeerResponse, reader: jspb.BinaryReader): DisconnectPeerResponse;
}

export namespace DisconnectPeerResponse {
  export type AsObject = {
  }
}

export class ConnectednessRequest extends jspb.Message {
  getPeerId(): string;
  setPeerId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectednessRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectednessRequest): ConnectednessRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectednessRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectednessRequest;
  static deserializeBinaryFromReader(message: ConnectednessRequest, reader: jspb.BinaryReader): ConnectednessRequest;
}

export namespace ConnectednessRequest {
  export type AsObject = {
    peerId: string,
  }
}

export class ConnectednessResponse extends jspb.Message {
  getConnectedness(): ConnectednessMap[keyof ConnectednessMap];
  setConnectedness(value: ConnectednessMap[keyof ConnectednessMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConnectednessResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConnectednessResponse): ConnectednessResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConnectednessResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConnectednessResponse;
  static deserializeBinaryFromReader(message: ConnectednessResponse, reader: jspb.BinaryReader): ConnectednessResponse;
}

export namespace ConnectednessResponse {
  export type AsObject = {
    connectedness: ConnectednessMap[keyof ConnectednessMap],
  }
}

export interface ConnectednessMap {
  CONNECTEDNESS_UNSPECIFIED: 0;
  CONNECTEDNESS_NOT_CONNECTED: 1;
  CONNECTEDNESS_CONNECTED: 2;
  CONNECTEDNESS_CAN_CONNECT: 3;
  CONNECTEDNESS_CANNOT_CONNECT: 4;
  CONNECTEDNESS_ERROR: 5;
}

export const Connectedness: ConnectednessMap;

