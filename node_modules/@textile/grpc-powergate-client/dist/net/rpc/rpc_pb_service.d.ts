// package: net.rpc
// file: net/rpc/rpc.proto

import * as net_rpc_rpc_pb from "../../net/rpc/rpc_pb";
import {grpc} from "@improbable-eng/grpc-web";

type RPCServiceListenAddr = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof net_rpc_rpc_pb.ListenAddrRequest;
  readonly responseType: typeof net_rpc_rpc_pb.ListenAddrResponse;
};

type RPCServicePeers = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof net_rpc_rpc_pb.PeersRequest;
  readonly responseType: typeof net_rpc_rpc_pb.PeersResponse;
};

type RPCServiceFindPeer = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof net_rpc_rpc_pb.FindPeerRequest;
  readonly responseType: typeof net_rpc_rpc_pb.FindPeerResponse;
};

type RPCServiceConnectPeer = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof net_rpc_rpc_pb.ConnectPeerRequest;
  readonly responseType: typeof net_rpc_rpc_pb.ConnectPeerResponse;
};

type RPCServiceDisconnectPeer = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof net_rpc_rpc_pb.DisconnectPeerRequest;
  readonly responseType: typeof net_rpc_rpc_pb.DisconnectPeerResponse;
};

type RPCServiceConnectedness = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof net_rpc_rpc_pb.ConnectednessRequest;
  readonly responseType: typeof net_rpc_rpc_pb.ConnectednessResponse;
};

export class RPCService {
  static readonly serviceName: string;
  static readonly ListenAddr: RPCServiceListenAddr;
  static readonly Peers: RPCServicePeers;
  static readonly FindPeer: RPCServiceFindPeer;
  static readonly ConnectPeer: RPCServiceConnectPeer;
  static readonly DisconnectPeer: RPCServiceDisconnectPeer;
  static readonly Connectedness: RPCServiceConnectedness;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class RPCServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  listenAddr(
    requestMessage: net_rpc_rpc_pb.ListenAddrRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.ListenAddrResponse|null) => void
  ): UnaryResponse;
  listenAddr(
    requestMessage: net_rpc_rpc_pb.ListenAddrRequest,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.ListenAddrResponse|null) => void
  ): UnaryResponse;
  peers(
    requestMessage: net_rpc_rpc_pb.PeersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.PeersResponse|null) => void
  ): UnaryResponse;
  peers(
    requestMessage: net_rpc_rpc_pb.PeersRequest,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.PeersResponse|null) => void
  ): UnaryResponse;
  findPeer(
    requestMessage: net_rpc_rpc_pb.FindPeerRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.FindPeerResponse|null) => void
  ): UnaryResponse;
  findPeer(
    requestMessage: net_rpc_rpc_pb.FindPeerRequest,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.FindPeerResponse|null) => void
  ): UnaryResponse;
  connectPeer(
    requestMessage: net_rpc_rpc_pb.ConnectPeerRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.ConnectPeerResponse|null) => void
  ): UnaryResponse;
  connectPeer(
    requestMessage: net_rpc_rpc_pb.ConnectPeerRequest,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.ConnectPeerResponse|null) => void
  ): UnaryResponse;
  disconnectPeer(
    requestMessage: net_rpc_rpc_pb.DisconnectPeerRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.DisconnectPeerResponse|null) => void
  ): UnaryResponse;
  disconnectPeer(
    requestMessage: net_rpc_rpc_pb.DisconnectPeerRequest,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.DisconnectPeerResponse|null) => void
  ): UnaryResponse;
  connectedness(
    requestMessage: net_rpc_rpc_pb.ConnectednessRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.ConnectednessResponse|null) => void
  ): UnaryResponse;
  connectedness(
    requestMessage: net_rpc_rpc_pb.ConnectednessRequest,
    callback: (error: ServiceError|null, responseMessage: net_rpc_rpc_pb.ConnectednessResponse|null) => void
  ): UnaryResponse;
}

