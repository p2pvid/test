// package: net.rpc
// file: net/rpc/rpc.proto

var net_rpc_rpc_pb = require("../../net/rpc/rpc_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var RPCService = (function () {
  function RPCService() {}
  RPCService.serviceName = "net.rpc.RPCService";
  return RPCService;
}());

RPCService.ListenAddr = {
  methodName: "ListenAddr",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: net_rpc_rpc_pb.ListenAddrRequest,
  responseType: net_rpc_rpc_pb.ListenAddrResponse
};

RPCService.Peers = {
  methodName: "Peers",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: net_rpc_rpc_pb.PeersRequest,
  responseType: net_rpc_rpc_pb.PeersResponse
};

RPCService.FindPeer = {
  methodName: "FindPeer",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: net_rpc_rpc_pb.FindPeerRequest,
  responseType: net_rpc_rpc_pb.FindPeerResponse
};

RPCService.ConnectPeer = {
  methodName: "ConnectPeer",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: net_rpc_rpc_pb.ConnectPeerRequest,
  responseType: net_rpc_rpc_pb.ConnectPeerResponse
};

RPCService.DisconnectPeer = {
  methodName: "DisconnectPeer",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: net_rpc_rpc_pb.DisconnectPeerRequest,
  responseType: net_rpc_rpc_pb.DisconnectPeerResponse
};

RPCService.Connectedness = {
  methodName: "Connectedness",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: net_rpc_rpc_pb.ConnectednessRequest,
  responseType: net_rpc_rpc_pb.ConnectednessResponse
};

exports.RPCService = RPCService;

function RPCServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

RPCServiceClient.prototype.listenAddr = function listenAddr(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.ListenAddr, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.peers = function peers(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Peers, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.findPeer = function findPeer(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.FindPeer, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.connectPeer = function connectPeer(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.ConnectPeer, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.disconnectPeer = function disconnectPeer(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.DisconnectPeer, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.connectedness = function connectedness(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Connectedness, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.RPCServiceClient = RPCServiceClient;

