// package: reputation.rpc
// file: reputation/rpc/rpc.proto

import * as jspb from "google-protobuf";

export class MinerScore extends jspb.Message {
  getAddr(): string;
  setAddr(value: string): void;

  getScore(): number;
  setScore(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MinerScore.AsObject;
  static toObject(includeInstance: boolean, msg: MinerScore): MinerScore.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MinerScore, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MinerScore;
  static deserializeBinaryFromReader(message: MinerScore, reader: jspb.BinaryReader): MinerScore;
}

export namespace MinerScore {
  export type AsObject = {
    addr: string,
    score: number,
  }
}

export class AddSourceRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getMaddr(): string;
  setMaddr(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddSourceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AddSourceRequest): AddSourceRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddSourceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddSourceRequest;
  static deserializeBinaryFromReader(message: AddSourceRequest, reader: jspb.BinaryReader): AddSourceRequest;
}

export namespace AddSourceRequest {
  export type AsObject = {
    id: string,
    maddr: string,
  }
}

export class AddSourceResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddSourceResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AddSourceResponse): AddSourceResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddSourceResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddSourceResponse;
  static deserializeBinaryFromReader(message: AddSourceResponse, reader: jspb.BinaryReader): AddSourceResponse;
}

export namespace AddSourceResponse {
  export type AsObject = {
  }
}

export class GetTopMinersRequest extends jspb.Message {
  getLimit(): number;
  setLimit(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTopMinersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetTopMinersRequest): GetTopMinersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetTopMinersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTopMinersRequest;
  static deserializeBinaryFromReader(message: GetTopMinersRequest, reader: jspb.BinaryReader): GetTopMinersRequest;
}

export namespace GetTopMinersRequest {
  export type AsObject = {
    limit: number,
  }
}

export class GetTopMinersResponse extends jspb.Message {
  clearTopMinersList(): void;
  getTopMinersList(): Array<MinerScore>;
  setTopMinersList(value: Array<MinerScore>): void;
  addTopMiners(value?: MinerScore, index?: number): MinerScore;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTopMinersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetTopMinersResponse): GetTopMinersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetTopMinersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTopMinersResponse;
  static deserializeBinaryFromReader(message: GetTopMinersResponse, reader: jspb.BinaryReader): GetTopMinersResponse;
}

export namespace GetTopMinersResponse {
  export type AsObject = {
    topMinersList: Array<MinerScore.AsObject>,
  }
}

