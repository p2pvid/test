// package: reputation.rpc
// file: reputation/rpc/rpc.proto

var reputation_rpc_rpc_pb = require("../../reputation/rpc/rpc_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var RPCService = (function () {
  function RPCService() {}
  RPCService.serviceName = "reputation.rpc.RPCService";
  return RPCService;
}());

RPCService.AddSource = {
  methodName: "AddSource",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: reputation_rpc_rpc_pb.AddSourceRequest,
  responseType: reputation_rpc_rpc_pb.AddSourceResponse
};

RPCService.GetTopMiners = {
  methodName: "GetTopMiners",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: reputation_rpc_rpc_pb.GetTopMinersRequest,
  responseType: reputation_rpc_rpc_pb.GetTopMinersResponse
};

exports.RPCService = RPCService;

function RPCServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

RPCServiceClient.prototype.addSource = function addSource(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.AddSource, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.getTopMiners = function getTopMiners(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.GetTopMiners, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.RPCServiceClient = RPCServiceClient;

