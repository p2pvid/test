// package: wallet.rpc
// file: wallet/rpc/rpc.proto

import * as wallet_rpc_rpc_pb from "../../wallet/rpc/rpc_pb";
import {grpc} from "@improbable-eng/grpc-web";

type RPCServiceNewAddress = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_rpc_rpc_pb.NewAddressRequest;
  readonly responseType: typeof wallet_rpc_rpc_pb.NewAddressResponse;
};

type RPCServiceList = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_rpc_rpc_pb.ListRequest;
  readonly responseType: typeof wallet_rpc_rpc_pb.ListResponse;
};

type RPCServiceBalance = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_rpc_rpc_pb.BalanceRequest;
  readonly responseType: typeof wallet_rpc_rpc_pb.BalanceResponse;
};

type RPCServiceSendFil = {
  readonly methodName: string;
  readonly service: typeof RPCService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof wallet_rpc_rpc_pb.SendFilRequest;
  readonly responseType: typeof wallet_rpc_rpc_pb.SendFilResponse;
};

export class RPCService {
  static readonly serviceName: string;
  static readonly NewAddress: RPCServiceNewAddress;
  static readonly List: RPCServiceList;
  static readonly Balance: RPCServiceBalance;
  static readonly SendFil: RPCServiceSendFil;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class RPCServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  newAddress(
    requestMessage: wallet_rpc_rpc_pb.NewAddressRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_rpc_rpc_pb.NewAddressResponse|null) => void
  ): UnaryResponse;
  newAddress(
    requestMessage: wallet_rpc_rpc_pb.NewAddressRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_rpc_rpc_pb.NewAddressResponse|null) => void
  ): UnaryResponse;
  list(
    requestMessage: wallet_rpc_rpc_pb.ListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_rpc_rpc_pb.ListResponse|null) => void
  ): UnaryResponse;
  list(
    requestMessage: wallet_rpc_rpc_pb.ListRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_rpc_rpc_pb.ListResponse|null) => void
  ): UnaryResponse;
  balance(
    requestMessage: wallet_rpc_rpc_pb.BalanceRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_rpc_rpc_pb.BalanceResponse|null) => void
  ): UnaryResponse;
  balance(
    requestMessage: wallet_rpc_rpc_pb.BalanceRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_rpc_rpc_pb.BalanceResponse|null) => void
  ): UnaryResponse;
  sendFil(
    requestMessage: wallet_rpc_rpc_pb.SendFilRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: wallet_rpc_rpc_pb.SendFilResponse|null) => void
  ): UnaryResponse;
  sendFil(
    requestMessage: wallet_rpc_rpc_pb.SendFilRequest,
    callback: (error: ServiceError|null, responseMessage: wallet_rpc_rpc_pb.SendFilResponse|null) => void
  ): UnaryResponse;
}

