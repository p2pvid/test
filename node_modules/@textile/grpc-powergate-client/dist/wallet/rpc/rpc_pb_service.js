// package: wallet.rpc
// file: wallet/rpc/rpc.proto

var wallet_rpc_rpc_pb = require("../../wallet/rpc/rpc_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var RPCService = (function () {
  function RPCService() {}
  RPCService.serviceName = "wallet.rpc.RPCService";
  return RPCService;
}());

RPCService.NewAddress = {
  methodName: "NewAddress",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: wallet_rpc_rpc_pb.NewAddressRequest,
  responseType: wallet_rpc_rpc_pb.NewAddressResponse
};

RPCService.List = {
  methodName: "List",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: wallet_rpc_rpc_pb.ListRequest,
  responseType: wallet_rpc_rpc_pb.ListResponse
};

RPCService.Balance = {
  methodName: "Balance",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: wallet_rpc_rpc_pb.BalanceRequest,
  responseType: wallet_rpc_rpc_pb.BalanceResponse
};

RPCService.SendFil = {
  methodName: "SendFil",
  service: RPCService,
  requestStream: false,
  responseStream: false,
  requestType: wallet_rpc_rpc_pb.SendFilRequest,
  responseType: wallet_rpc_rpc_pb.SendFilResponse
};

exports.RPCService = RPCService;

function RPCServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

RPCServiceClient.prototype.newAddress = function newAddress(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.NewAddress, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.list = function list(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.List, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.balance = function balance(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.Balance, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RPCServiceClient.prototype.sendFil = function sendFil(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RPCService.SendFil, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.RPCServiceClient = RPCServiceClient;

